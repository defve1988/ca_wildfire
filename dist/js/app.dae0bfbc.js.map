{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/App.vue?fd44","webpack:///src/App.vue","webpack:///./src/App.vue?3359","webpack:///./src/App.vue","webpack:///./src/assets/ca_logo.vue?3975","webpack:///./src/assets/ca_logo.vue","webpack:///./src/plugins/vuetify.js","webpack:///./src/my_df/src/file_loader.js","webpack:///./src/my_df/src/data_clean.js","webpack:///./src/my_df/src/data_filter.js","webpack:///./src/my_df/src/data_model.js","webpack:///./src/my_df/src/date_format.js","webpack:///./src/my_df/index.js","webpack:///./src/my_plot/src/plotly_func.js","webpack:///./src/my_plot/src/plotly_fig.js","webpack:///./src/my_plot/src/map_box.js","webpack:///./src/my_plot/src/bar_race.js","webpack:///./src/my_plot/index.js","webpack:///./src/store/modules/app_data.js","webpack:///./src/store/modules/ui_control.js","webpack:///./src/store/index.js","webpack:///./src/main.js","webpack:///./src/App.vue?fdb3"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","installedCssChunks","jsonpScriptSrc","p","exports","module","l","e","promises","cssChunks","Promise","resolve","reject","href","fullhref","existingLinkTags","document","getElementsByTagName","tag","dataHref","getAttribute","rel","existingStyleTags","linkTag","createElement","type","onload","onerror","event","request","target","src","err","Error","code","parentNode","removeChild","head","appendChild","then","installedChunkData","promise","onScriptComplete","script","charset","timeout","nc","setAttribute","error","clearTimeout","chunk","errorType","realSrc","message","name","undefined","setTimeout","all","m","c","d","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","oe","console","jsonpArray","window","oldJsonpFunction","slice","_vm","this","_h","$createElement","_c","_self","staticClass","attrs","ui_control","status_calculations","stats_df","auto_list","date_range","map_setting","map_tabs","bar_selector","scatter_selector","hist_selector","staticRenderFns","mounted","INIT_DF","components","StatsCard","DateSlider","MapCard","HistCard","ScatterCard","BarCard","AppBar","InforDialog","Footer","computed","app_data","methods","component","VApp","VCol","VContainer","VMain","VRow","staticStyle","Vue","use","Vuetify","theme","themes","light","primary","secondary","success","accent","info","warning","icons","values","ca_logo","filer_loader","df","fetch","file","split","pop","fetch_csv","fetch_json","update","d3","response","readFileAsync","JSON","parse","convert_csv","content","reader","FileReader","readAsText","lines","output","header","trim","filter","x","map","toLowerCase","h","line","data_clean","new_data","concat","cols","forEach","element","row_index","temp","row","index","isEqual","entries","val1","val2","missing","new_key_1","new_key_2","res","includes","file_loader","data_filter","new_col","val","isNaN","Number","col","Date","parseInt","parseFloat","item","reduce","prev","curr","func","y","min","max","mean","std","median","sum","Math","round","col1","col2","group","unique_col","g","res_row","stats_col","start","end","format","arr","dt","setDate","getDate","dateFormat","read","date_format","df_filter","data_model","div","fig_type","displaylogo","responsive","displayModeBar","staticPlot","editable","mapboxAccessToken","width","height","autosize","margin","b","title","xaxis","titlefont","size","family","color","showticklabels","showline","showgrid","zeroline","autotick","yaxis","font","showlegend","legend","xanchor","yanchor","coloraxis","colorscale","colorbar","len","dragmode","bargap","bargroupgap","barmode","mapbox","style","center","lat","lon","zoom","trace","layout","assign","config","hex","alpha","substring","animated","animate_x","start_trace","Plotly","newPlot","animate","traces","Array","from","keys","transition","duration","easing","addTraces","relayout","purge","file_name","toImage","url","pom","click","deleteTraces","plot_type","set_fig","gen_trace","gen_wind_rose","gen_hist","max_y","bin_num","color_index","floor","random","y_name","xbins","autobinx","histnorm","marker","hex2rgba","color_theme","opacity","plot_new","text","plot","fill","theta","polar","radialaxis","ticksuffix","angle","dtick","angularaxis","direction","log","plotly_func","clear_image","show_text","hovertemplate","hoverlabel","bgcolor","textposition","op","add_trace","del_trace","plot_config","svg","ticker","date","dateSlice","race_data","sort","a","top_n","rank","date_list","country_color","country","location","loc","loc_name","prev_date","lastValue","colour","update_ticker","stop","tickDuration","barPadding","bottom","top","selectAll","remove","append","attr","gene_race_data","date_index","gen_dataSlice","domain","range","left","right","xAxis","scale","ticks","tickSize","tickFormat","classed","enter","html","dateText","obj","select","ease","bars","replace","exit","labels","valueLabels","tween","textContent","restart","viz","viz_type","plot_obj","plotly_fig","set_layout","set_config","map_box","bar_race","state","my_df","json","year_range","slider","map_view","my_plot","map_trace","hist_view","hist_trace","scatter_view","scatter_trace","bar_view","bar_trace","include_all","getters","actions","mutations","TEST","year","Started","Extinguished","last_time","date_1","getFullYear","getMonth","date_2","ArchiveYear","GENE_MAP_TRACE","tab","color_scale","Latitude","Longitude","Name","log2","GENE_HIST_TRACE","Infinity","GENE_HIST_TRACE_ALL","log10","GENE_SCATTER","xy","GENE_BAR","ytab","yselect","show_infor_dialog","text_color","show","sort_by","method","tabs","Vuex","Store","productionTip","vuetify","store","render","App","$mount"],"mappings":"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","file":"js/app.dae0bfbc.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded CSS chunks\n \tvar installedCssChunks = {\n \t\t\"app\": 0\n \t}\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// script path function\n \tfunction jsonpScriptSrc(chunkId) {\n \t\treturn __webpack_require__.p + \"js/\" + ({}[chunkId]||chunkId) + \".\" + {\"chunk-1f5361c8\":\"b2319f85\",\"chunk-2a69c517\":\"fea3d656\",\"chunk-53e8ccb6\":\"c58e33d0\",\"chunk-28388909\":\"f29e0421\",\"chunk-39374c86\":\"8753df96\",\"chunk-3fe03d73\":\"c4215738\",\"chunk-a629d6b4\":\"edf43a54\",\"chunk-c39549a8\":\"e0b88d97\",\"chunk-713a0236\":\"5feeeb60\",\"chunk-492b83e6\":\"9cec4ebd\",\"chunk-49d2146a\":\"18930851\",\"chunk-7123ce31\":\"ffae1081\",\"chunk-4b9b539c\":\"421ce05a\",\"chunk-725aca97\":\"2ab07af9\"}[chunkId] + \".js\"\n \t}\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// mini-css-extract-plugin CSS loading\n \t\tvar cssChunks = {\"chunk-1f5361c8\":1,\"chunk-2a69c517\":1,\"chunk-53e8ccb6\":1,\"chunk-28388909\":1,\"chunk-39374c86\":1,\"chunk-3fe03d73\":1,\"chunk-a629d6b4\":1,\"chunk-c39549a8\":1,\"chunk-713a0236\":1,\"chunk-492b83e6\":1,\"chunk-49d2146a\":1,\"chunk-7123ce31\":1,\"chunk-4b9b539c\":1,\"chunk-725aca97\":1};\n \t\tif(installedCssChunks[chunkId]) promises.push(installedCssChunks[chunkId]);\n \t\telse if(installedCssChunks[chunkId] !== 0 && cssChunks[chunkId]) {\n \t\t\tpromises.push(installedCssChunks[chunkId] = new Promise(function(resolve, reject) {\n \t\t\t\tvar href = \"css/\" + ({}[chunkId]||chunkId) + \".\" + {\"chunk-1f5361c8\":\"3274cd4a\",\"chunk-2a69c517\":\"b9a7d446\",\"chunk-53e8ccb6\":\"55c011d2\",\"chunk-28388909\":\"b490d9b1\",\"chunk-39374c86\":\"8c3b68be\",\"chunk-3fe03d73\":\"eb052a1b\",\"chunk-a629d6b4\":\"3c55ee1e\",\"chunk-c39549a8\":\"dbd06860\",\"chunk-713a0236\":\"aa35bca3\",\"chunk-492b83e6\":\"13513e84\",\"chunk-49d2146a\":\"74eb8897\",\"chunk-7123ce31\":\"aa35bca3\",\"chunk-4b9b539c\":\"7bfe55c0\",\"chunk-725aca97\":\"28c843c5\"}[chunkId] + \".css\";\n \t\t\t\tvar fullhref = __webpack_require__.p + href;\n \t\t\t\tvar existingLinkTags = document.getElementsByTagName(\"link\");\n \t\t\t\tfor(var i = 0; i < existingLinkTags.length; i++) {\n \t\t\t\t\tvar tag = existingLinkTags[i];\n \t\t\t\t\tvar dataHref = tag.getAttribute(\"data-href\") || tag.getAttribute(\"href\");\n \t\t\t\t\tif(tag.rel === \"stylesheet\" && (dataHref === href || dataHref === fullhref)) return resolve();\n \t\t\t\t}\n \t\t\t\tvar existingStyleTags = document.getElementsByTagName(\"style\");\n \t\t\t\tfor(var i = 0; i < existingStyleTags.length; i++) {\n \t\t\t\t\tvar tag = existingStyleTags[i];\n \t\t\t\t\tvar dataHref = tag.getAttribute(\"data-href\");\n \t\t\t\t\tif(dataHref === href || dataHref === fullhref) return resolve();\n \t\t\t\t}\n \t\t\t\tvar linkTag = document.createElement(\"link\");\n \t\t\t\tlinkTag.rel = \"stylesheet\";\n \t\t\t\tlinkTag.type = \"text/css\";\n \t\t\t\tlinkTag.onload = resolve;\n \t\t\t\tlinkTag.onerror = function(event) {\n \t\t\t\t\tvar request = event && event.target && event.target.src || fullhref;\n \t\t\t\t\tvar err = new Error(\"Loading CSS chunk \" + chunkId + \" failed.\\n(\" + request + \")\");\n \t\t\t\t\terr.code = \"CSS_CHUNK_LOAD_FAILED\";\n \t\t\t\t\terr.request = request;\n \t\t\t\t\tdelete installedCssChunks[chunkId]\n \t\t\t\t\tlinkTag.parentNode.removeChild(linkTag)\n \t\t\t\t\treject(err);\n \t\t\t\t};\n \t\t\t\tlinkTag.href = fullhref;\n\n \t\t\t\tvar head = document.getElementsByTagName(\"head\")[0];\n \t\t\t\thead.appendChild(linkTag);\n \t\t\t}).then(function() {\n \t\t\t\tinstalledCssChunks[chunkId] = 0;\n \t\t\t}));\n \t\t}\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar script = document.createElement('script');\n \t\t\t\tvar onScriptComplete;\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n\n \t\t\t\t// create error before stack unwound to get useful stacktrace later\n \t\t\t\tvar error = new Error();\n \t\t\t\tonScriptComplete = function (event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n \t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\tdocument.head.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-app',[_c('AppBar'),_c('v-main',[_c('v-container',{staticClass:\"mt-0 pt-1 mb-0 pb-1 px-6\",attrs:{\"fluid\":\"\"}},[_c('v-row',{attrs:{\"justify\":\"center\"}},[_c('v-col',{staticClass:\"pa-0\",attrs:{\"cols\":\"2\"}},[_c('v-row',[_c('v-col',[_c('StatsCard',{attrs:{\"card_height\":650,\"calculations\":_vm.ui_control.status_calculations,\"stats_df\":_vm.stats_df,\"auto_list\":_vm.ui_control.auto_list}})],1)],1),_c('v-row',[_c('v-col',{staticClass:\"py-0\"},[_c('DateSlider',{attrs:{\"card_height\":150,\"date_range\":_vm.date_range}})],1)],1)],1),_c('v-col',{staticClass:\"pa-3 pb-0\",attrs:{\"cols\":\"5\"}},[_c('MapCard',{attrs:{\"card_height\":810,\"map_setting\":_vm.ui_control.map_setting,\"map_tabs\":_vm.ui_control.map_tabs}})],1),_c('v-col',{staticClass:\"pa-0\",attrs:{\"cols\":\"5\"}},[_c('v-row',[_c('v-col',[_c('BarCard',{attrs:{\"card_height\":450,\"selectors\":_vm.ui_control.bar_selector,\"plot_height\":415}})],1)],1),_c('v-row',[_c('v-col',{staticClass:\"py-0 pr-0\",attrs:{\"cols\":\"6\"}},[_c('ScatterCard',{attrs:{\"card_height\":350,\"selectors\":_vm.ui_control.scatter_selector,\"plot_height\":315}})],1),_c('v-col',{staticClass:\"py-0\",attrs:{\"cols\":\"6\"}},[_c('HistCard',{attrs:{\"card_height\":350,\"selectors\":_vm.ui_control.hist_selector,\"plot_height\":288}})],1)],1)],1)],1)],1)],1),_c('Footer'),_c('InforDialog')],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <v-app>\r\n    <AppBar />\r\n    <v-main>\r\n      <v-container class=\"mt-0 pt-1 mb-0 pb-1 px-6\" fluid>\r\n        <v-row justify=\"center\">\r\n          <v-col cols=\"2\" class=\"pa-0\">\r\n            <v-row>\r\n              <v-col>\r\n                <StatsCard\r\n                  :card_height=\"650\"\r\n                  :calculations=\"ui_control.status_calculations\"\r\n                  :stats_df=\"stats_df\"\r\n                  :auto_list=\"ui_control.auto_list\"\r\n                />\r\n              </v-col>\r\n            </v-row>\r\n\r\n            <v-row>\r\n              <v-col class=\"py-0\">\r\n                <DateSlider :card_height=\"150\" :date_range=\"date_range\" />\r\n              </v-col>\r\n            </v-row>\r\n          </v-col>\r\n\r\n          <v-col cols=\"5\" class=\"pa-3 pb-0\">\r\n            <MapCard\r\n              :card_height=\"810\"\r\n              :map_setting=\"ui_control.map_setting\"\r\n              :map_tabs=\"ui_control.map_tabs\"\r\n            />\r\n          </v-col>\r\n\r\n          <v-col cols=\"5\" class=\"pa-0\">\r\n            <!-- <v-row>\r\n              <v-col>\r\n                <DateSlider :card_height=\"450\" :date_range=\"date_range\" />\r\n              </v-col>\r\n            </v-row> -->\r\n\r\n            <v-row>\r\n              <v-col>\r\n                <BarCard \r\n                  :card_height=\"450\"\r\n                  :selectors=\"ui_control.bar_selector\"\r\n                  :plot_height=\"415\" />\r\n              </v-col>\r\n            </v-row>\r\n\r\n            <v-row>\r\n              <v-col cols=\"6\" class=\"py-0 pr-0\">\r\n                <ScatterCard\r\n                  :card_height=\"350\"\r\n                  :selectors=\"ui_control.scatter_selector\"\r\n                  :plot_height=\"315\"\r\n                />\r\n              </v-col>\r\n              <v-col cols=\"6\" class=\"py-0\">\r\n                <HistCard\r\n                  :card_height=\"350\"\r\n                  :selectors=\"ui_control.hist_selector\"\r\n                  :plot_height=\"288\"\r\n                />\r\n              </v-col>\r\n            </v-row>\r\n          </v-col>\r\n        </v-row>\r\n      </v-container>\r\n    </v-main>\r\n    <Footer />\r\n    <InforDialog />\r\n  </v-app>\r\n</template>\r\n\r\n<script>\r\nimport { mapState, mapMutations } from \"vuex\";\r\n// import Bar_card from './components/core/bar_card.vue';\r\n\r\nexport default {\r\n  name: \"App\",\r\n  mounted() {\r\n    this.INIT_DF();\r\n    // console.log(this.app_data.data.df);\r\n  },\r\n  components: {\r\n    StatsCard: () => import(\"@/components/core/stats_card\"),\r\n    DateSlider: () => import(\"@/components/core/widgets/date_slider\"),\r\n    MapCard: () => import(\"@/components/core/map_card\"),\r\n    HistCard: () => import(\"@/components/core/hist_card\"),\r\n    ScatterCard: () => import(\"@/components/core/scatter_card\"),\r\n    BarCard: () => import(\"@/components/core/bar_card\"),\r\n\r\n    AppBar: () => import(\"@/components/common/app_bar\"),\r\n    InforDialog: () => import(\"@/components/common/infor_dialog\"),\r\n    Footer: () => import(\"@/components/common/footer\")\r\n  },\r\n  computed: {\r\n    ...mapState({\r\n      ui_control: \"ui_control\",\r\n      app_data: \"app_data\",\r\n    }),\r\n    date_range() {\r\n      return this.app_data.date_range;\r\n    },\r\n  },\r\n  data: () => ({\r\n    stats_df: \"df\",\r\n\r\n    //\r\n  }),\r\n  methods: {\r\n    ...mapMutations([\"TEST\", \"INIT_DF\"]),\r\n  },\r\n};\r\n</script>\r\n<style scoped>\r\n/* div {\r\n  outline: 1px dashed red;\r\n} */\r\n</style>","import mod from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=5df4839e&scoped=true&\"\nimport script from \"./App.vue?vue&type=script&lang=js&\"\nexport * from \"./App.vue?vue&type=script&lang=js&\"\nimport style0 from \"./App.vue?vue&type=style&index=0&id=5df4839e&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"5df4839e\",\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VApp } from 'vuetify/lib/components/VApp';\nimport { VCol } from 'vuetify/lib/components/VGrid';\nimport { VContainer } from 'vuetify/lib/components/VGrid';\nimport { VMain } from 'vuetify/lib/components/VMain';\nimport { VRow } from 'vuetify/lib/components/VGrid';\ninstallComponents(component, {VApp,VCol,VContainer,VMain,VRow})\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('svg',{attrs:{\"id\":\"svg576\",\"sodipodi:docname\":\"California - Outline and Flag.svg\",\"viewBox\":\"0 0 700 800\",\"version\":\"1.0\",\"inkscape:version\":\"0.48.1 \"}},[_c('sodipodi:namedview',{attrs:{\"id\":\"namedview3105\",\"fit-margin-left\":\"0\",\"inkscape:zoom\":\"0.45471497\",\"borderopacity\":\"1\",\"inkscape:current-layer\":\"svg576\",\"inkscape:cx\":\"378.4731\",\"inkscape:cy\":\"449.33228\",\"inkscape:window-maximized\":\"1\",\"inkscape:snap-bbox\":\"true\",\"showgrid\":\"true\",\"fit-margin-right\":\"0\",\"inkscape:snap-nodes\":\"false\",\"inkscape:bbox-nodes\":\"true\",\"bordercolor\":\"#666666\",\"inkscape:window-x\":\"-8\",\"guidetolerance\":\"10\",\"objecttolerance\":\"10\",\"inkscape:window-y\":\"-8\",\"fit-margin-bottom\":\"0\",\"inkscape:window-width\":\"1366\",\"inkscape:pageopacity\":\"0\",\"inkscape:pageshadow\":\"2\",\"pagecolor\":\"#ffffff\",\"gridtolerance\":\"10\",\"inkscape:window-height\":\"706\",\"fit-margin-top\":\"0\"}},[_c('inkscape:grid',{attrs:{\"id\":\"grid3114\",\"enabled\":\"true\",\"visible\":\"true\",\"snapvisiblegridlinesonly\":\"true\",\"type\":\"xygrid\",\"empspacing\":\"5\"}})],1),_c('g',{attrs:{\"id\":\"g3384\",\"transform\":\"translate(-506 339)\"}},[_c('g',{attrs:{\"id\":\"g3341\",\"transform\":\"matrix(.79048 0 0 .85333 197.19 25)\"}},[_c('path',{staticStyle:{\"fill\":\"#000000\"},attrs:{\"id\":\"path3235\",\"d\":\"m965 367.97h1.2651v-1.1719h5.0602v1.1719h1.2651v1.1719h-2.5301v-1.1719h-2.5301v5.8594h2.5301v-1.1719h2.5301v1.1719h-1.2651v1.1719h-5.0602v-1.1719h-1.2651z\",\"inkscape:connector-curvature\":\"0\"}}),_c('path',{staticStyle:{\"fill\":\"#000000\"},attrs:{\"id\":\"path3237\",\"d\":\"m975.12 366.8h6.3253v1.1719h1.2651v2.3438h-1.2651v1.1719h-1.265v1.1719h1.265v1.1719h1.2651v1.1719h-2.5301v-1.1719h-1.2651v-1.1719h-1.265v2.3438h-2.5301zm2.5301 1.1719v2.3438h2.5301v-2.3438z\",\"inkscape:connector-curvature\":\"0\"}}),_c('path',{staticStyle:{\"fill\":\"#000000\"},attrs:{\"id\":\"path3239\",\"d\":\"m985.24 366.8h7.5904v1.1719h-5.0602v2.3438h2.5301v1.1719h-2.5301v2.3438h5.0602v1.1719h-7.5904z\",\"inkscape:connector-curvature\":\"0\"}}),_c('path',{staticStyle:{\"fill\":\"#000000\"},attrs:{\"id\":\"path3241\",\"d\":\"m995.36 369.14h1.2651v-1.1719h1.2651v-1.1719h2.5302v1.1719h1.265v1.1719h1.2651v5.8594h-2.5301v-3.5156h-2.5302v3.5156h-2.5301zm2.5301 0v1.1719h2.5302v-1.1719z\",\"inkscape:connector-curvature\":\"0\"}}),_c('path',{staticStyle:{\"fill\":\"#000000\"},attrs:{\"id\":\"path3243\",\"d\":\"m1005.5 366.8h7.5904v1.1719h-2.5301v7.0312h-2.5302v-7.0312h-2.5301z\",\"inkscape:connector-curvature\":\"0\"}}),_c('path',{staticStyle:{\"fill\":\"#000000\"},attrs:{\"id\":\"path3245\",\"d\":\"m1015.6 366.8h7.5904v1.1719h-5.0603v2.3438h2.5301v1.1719h-2.5301v2.3438h5.0603v1.1719h-7.5904z\",\"inkscape:connector-curvature\":\"0\"}}),_c('path',{staticStyle:{\"fill\":\"#000000\"},attrs:{\"id\":\"path3247\",\"d\":\"m1025.7 366.8h5.0602v1.1719h1.2651v1.1719h1.265v3.5156h-1.265v1.1719h-1.2651v1.1719h-5.0602zm2.5301 1.1719v5.8594h1.2651v-1.1719h1.265v-3.5156h-1.265v-1.1719z\",\"inkscape:connector-curvature\":\"0\"}}),_c('path',{staticStyle:{\"fill\":\"#000000\"},attrs:{\"id\":\"path3249\",\"d\":\"m1046 366.8h6.3253v1.1719h1.2651v2.3438h-1.2651v1.1719h1.2651v2.3438h-1.2651v1.1719h-6.3253zm2.5302 4.6875v2.3438h2.5301v-2.3438zm0-3.5156v2.3438h2.5301v-2.3438z\",\"inkscape:connector-curvature\":\"0\"}}),_c('path',{staticStyle:{\"fill\":\"#000000\"},attrs:{\"id\":\"path3251\",\"d\":\"m1056.1 366.8h2.5301v3.5156h2.5302v-3.5156h2.5301v3.5156h-1.2651v1.1719h-1.265v3.5156h-2.5302v-3.5156h-1.265v-1.1719h-1.2651z\",\"inkscape:connector-curvature\":\"0\"}}),_c('path',{staticStyle:{\"fill\":\"#000000\"},attrs:{\"id\":\"path3253\",\"d\":\"m1076.3 366.8h5.0602v1.1719h1.2651v1.1719h1.265v3.5156h-1.265v1.1719h-1.2651v1.1719h-5.0602zm2.5301 1.1719v5.8594h1.2651v-1.1719h1.265v-3.5156h-1.265v-1.1719z\",\"inkscape:connector-curvature\":\"0\"}}),_c('path',{staticStyle:{\"fill\":\"#000000\"},attrs:{\"id\":\"path3255\",\"d\":\"m1086.4 366.8h7.5903v1.1719h-5.0602v2.3438h2.5301v1.1719h-2.5301v2.3438h5.0602v1.1719h-7.5903z\",\"inkscape:connector-curvature\":\"0\"}}),_c('path',{staticStyle:{\"fill\":\"#000000\"},attrs:{\"id\":\"path3257\",\"d\":\"m1096.6 366.8h2.5302v5.8594h2.5301v-5.8594h2.5301v5.8594h-1.265v1.1719h-1.2651v1.1719h-2.5301v-1.1719h-1.2651v-1.1719h-1.2651z\",\"inkscape:connector-curvature\":\"0\"}}),_c('path',{staticStyle:{\"fill\":\"#000000\"},attrs:{\"id\":\"path3259\",\"d\":\"m1109.2 367.97h-1.2651v-1.1719h5.0602v1.1719h-1.265v5.8594h1.265v1.1719h-5.0602v-1.1719h1.2651z\",\"inkscape:connector-curvature\":\"0\"}}),_c('path',{staticStyle:{\"fill\":\"#000000\"},attrs:{\"id\":\"path3261\",\"d\":\"m1116.8 366.8h2.5301v1.1719h1.2651v1.1719h1.2651v-2.3438h2.5301v8.2031h-2.5301v-2.3438h-1.2651v-1.1719h-1.2651v3.5156h-2.5301z\",\"inkscape:connector-curvature\":\"0\"}}),_c('path',{staticStyle:{\"fill\":\"#000000\"},attrs:{\"id\":\"path3263\",\"d\":\"m1137 367.97h1.265v-1.1719h5.0603v1.1719h1.265v1.1719h-2.5301v-1.1719h-2.5301v5.8594h2.5301v-1.1719h2.5301v1.1719h-1.265v1.1719h-5.0603v-1.1719h-1.265z\",\"inkscape:connector-curvature\":\"0\"}}),_c('path',{staticStyle:{\"fill\":\"#000000\"},attrs:{\"id\":\"path3265\",\"d\":\"m1147.2 367.97h1.265v-1.1719h5.0603v1.1719h1.265v5.8594h-1.265v1.1719h-5.0603v-1.1719h-1.265zm2.5301 0v5.8594h2.5301v-5.8594z\",\"inkscape:connector-curvature\":\"0\"}}),_c('path',{staticStyle:{\"fill\":\"#000000\"},attrs:{\"id\":\"path3267\",\"d\":\"m1157.3 367.97h1.2651v-1.1719h5.0602v1.1719h1.2651v5.8594h-1.2651v1.1719h-5.0602v-1.1719h-1.2651zm2.5302 0v5.8594h2.5301v-5.8594z\",\"inkscape:connector-curvature\":\"0\"}}),_c('path',{staticStyle:{\"fill\":\"#000000\"},attrs:{\"id\":\"path3269\",\"d\":\"m1167.4 366.8h2.5301v2.3438h1.2651v-1.1719h1.2651v-1.1719h2.5301v1.1719h-1.2651v1.1719h-1.265v1.1719h-1.2651v1.1719h1.2651v1.1719h1.265v1.1719h1.2651v1.1719h-2.5301v-1.1719h-1.2651v-1.1719h-1.2651v2.3438h-2.5301z\",\"inkscape:connector-curvature\":\"0\"}})]),_c('path',{staticStyle:{\"fill\":\"#000000\"},attrs:{\"id\":\"path3271\",\"d\":\"m960 354v7h2.0009v-1.0114h0.9881v-0.9848h1.0128v0.9848h0.98811v1.0114h2.0009v-7h-2.0009v3.9924h-0.98811v-0.9848h-1.0128v0.9848h-0.9881v-3.9924h-2zm8.0037 0v7h2.0009v-1.0114h0.9881v-0.9848h1.0128v0.9848h0.98811v1.0114h2.0009v-7h-2.0009v3.9924h-0.98811v-0.9848h-1.0128v0.9848h-0.9881v-3.9924h-2.0009zm8.0037 0v7h2.0009v-1.0114h0.98811v-0.9848h1.0128v0.9848h0.98811v1.0114h2.0009v-7h-2.0009v3.9924h-0.98811v-0.9848h-1.0128v0.9848h-0.98811v-3.9924h-2.0009zm15.983 0v7h4.0017v-1.0114h1.0129v-0.9848h0.9881v-3.0076h-0.9881v-0.9848h-1.0129v-1.0114h-4.0017zm8.0036 0v7h6.0028v-1.0114h-4.0019v-1.9962h2.0009v-0.9848h-2.0009v-1.9962h4.0019v-1.0114h-6.0028zm8.0037 0v5.0038h1.0128v0.9848h0.9881v1.0114h2.0009v-1.0114h1.0128v-0.9848h0.9881v-5.0038h-2.0009v5.0038h-2.0009v-5.0038h-2.0009zm8.9918 0v1.0114h1.0127v4.9772h-1.0127v1.0114h4.0017v-1.0114h-0.9881v-4.9772h0.9881v-1.0114h-4.0017zm7.0155 0v7h2.0009v-3.0076h0.9881v1.0114h1.0128v1.9962h2.0009v-7h-2.0009v1.9962h-1.0128v-0.9848h-0.9881v-1.0114h-2.0009zm8.9918 0v1.0114h-0.9881v4.9772h0.9881v1.0114h4.0018v-1.0114h1.0128v-0.9848h-2.001v0.9848h-2.0008v-4.9772h2.0008v0.9848h2.001v-0.9848h-1.0128v-1.0114h-4.0018zm8.0037 0v1.0114h-0.9881v4.9772h0.9881v1.0114h4.0017v-1.0114h0.9881v-4.9772h-0.9881v-1.0114h-4.0017zm8.0036 0v1.0114h-1.0128v4.9772h1.0128v1.0114h4.0018v-1.0114h0.9881v-4.9772h-0.9881v-1.0114h-4.0018zm6.9908 0v7h2.001v-1.9962h1.0128v0.9848h0.9881v1.0114h2.0008v-1.0114h-0.9881v-0.9848h-1.0127v-1.0114h-0.9881v-0.9848h0.9881v-1.0114h1.0127v-0.9848h0.9881v-1.0114h-2.0008v1.0114h-0.9881v0.9848h-1.0128v-1.9962h-2.001zm16.996 0v1.0114h-0.9881v4.9772h0.9881v1.0114h4.0018v-1.0114h1.0128v-0.9848h-2.0009v0.9848h-2.0009v-4.9772h2.0009v0.9848h2.0009v-0.9848h-1.0128v-1.0114h-4.0018zm8.0036 0v1.0114h-0.9881v4.9772h0.9881v1.0114h4.0019v-1.0114h1.0127v-4.9772h-1.0127v-1.0114h-4.0019zm7.0156 0v7h2.0009v-3.9924h0.9881v0.9848h1.0128v-0.9848h0.9881v3.9924h2.0009v-7h-2.0009v1.0114h-0.9881v0.9848h-1.0128v-0.9848h-0.9881v-1.0114h-2.0009zm-94.018 1.0114h1.0127v0.9848h0.9881v3.0076h-0.9881v0.9848h-1.0127v-4.9772zm48.022 0h1.9762v4.9772h-1.9762v-4.9772zm7.979 0h2.0009v4.9772h-2.0009v-4.9772zm32.015 0h2.0009v4.9772h-2.0009v-4.9772zm-95.995 3.9924v1.9962h1.9762v-1.9962h-1.9762zm79.987 0v1.9962h2.0008v-1.9962h-2.0008z\",\"inkscape:connector-curvature\":\"0\"}})]),_c('path',{staticStyle:{\"fill-rule\":\"evenodd\",\"fill\":\"#b71234\"},attrs:{\"id\":\"path2822\",\"sodipodi:nodetypes\":\"ccccccccscscccccccsccccccccsscssccccccccccccscscccsscccsccccccccsscccsccsccccsccccsccscccscccccccsccsscccccsccscccsccccccccccsccccccscccscccscscsccccccccccccccsccccccccccccsccccccccccccccccccccccccccccsscccccccccsccsscscccscscsscccscccccccscccsccccccccccsccccccccccccscccccscccsccccccccccscccccscccccscccccccccccc\",\"inkscape:connector-curvature\":\"0\",\"d\":\"m300 0h-285l-1.3739 15.2-2.247 1.711v4.4202l4.9549 2.424 2.4775 2.9658v2.9373s1.498 0.71406 1.498 1.9392v5.1617s0.2369 0.48592 0.97946 1.711 2.7079 6.1312 2.7079 6.1312l-0.97946 15.685-2.2182 2.6806-0.25927 8.099-0.48973 3.4221-3.9755 3.4221 1.7573 3.6788s0.2422 2.2138 0.48973 3.194c0.24752 0.98009 1.7285 2.6806 1.7285 2.6806l-0.25927 8.8404-4.4364 7.8423-1.0083 4.6484v3.6788l-3.4569 0.96959-1.4692 5.6465-4.7245 8.3271s-3.4687 7.347-3.7162 8.3271c-0.24786 0.97-0.9798 2.21-0.9798 3.93 0 1.7152 2.9672 4.8765 2.9672 4.8765s0.48973 5.6592 0.48973 7.1294 1.2387 4.3928 1.2387 5.6179 9.4201 8.8119 9.4201 8.8119l8.4119 5.9031 0.97947 4.3917 3.4857 3.4506 4.4364 4.1636 1.7285 4.6483 4.4652 4.1636 0.25927 6.616 1.7285 1.711-0.25927 2.1958 2.4775 1.9677 1.498 16.169s-2.4775 0.9876-2.4775 1.9677v5.1331s-1.7285 3.212-1.7285 4.1921 0.23046 4.6483 0.23046 4.6483l2.9672 2.4525-0.48973 1.9392s1.498 2.2138 1.498 3.194c0 0.9801 0.24222 1.7122 0.48974 2.9373s1.2387 4.1636 1.2387 4.1636l3.1977 2.9373v4.905s1.2387 0.24088 1.2387 1.711v3.4506l-2.7079 4.6484-0.25927 4.905 8.1814 4.905v3.4221l2.9672 0.96959 10.889 10.067v2.424s1.9877 1.484 1.9877 2.7092c0 1.2251 4.4482 3.4232 4.6957 4.6483 0.24753 1.2251 3.7162 3.194 3.7162 3.194l4.2059 3.194 5.4447 5.1331s0.97947 1.4724 0.97947 2.4525c0 0.98011 2.247 6.616 2.247 6.616l3.7162 1.4829s2.2182 5.1343 2.2182 6.3594 1.7285 3.9069 1.7285 3.9069l-0.48973 3.9354-1.0083 4.1636-1.7285 3.6788s-1.7338 1.7185-1.2387 3.6788c0.49504 1.9602 2.4775 1.2262 2.4775 1.2262l3.2265-3.9354 4.2059 0.25666 3.9755 3.4221s1.9548 3.6735 3.6874 4.1636c1.7326 0.49005 1.9877 2.7092 1.9877 2.7092h7.1731s5.4447 5.1226 5.4447 6.1027c0 0.98011 4.4652 0.51331 4.4652 0.51331s1.9695-1.9741 0.97946-2.7092c-0.99008-0.73509-2.7079-3.194-2.7079-3.194s1.7285-0.73095 1.7285-1.711c0-0.98011-1.7285-2.9373-1.7285-2.9373l3.2265-5.6179-1.9877-0.74145-0.48974-7.1008 3.4569-0.99811 3.9467-3.1654 3.9755 3.4221s4.4652 2.6986 4.4652 3.6788c0 0.9801-0.51854 2.1958-0.51854 2.1958l-5.4447 3.194s-1.7285 0.46903-1.7285 1.9392-0.99121 0.0192-1.2387 2.2244c-0.24752 2.2052 0 5.1332 0 5.1332l4.2059 0.25665 1.2387 2.1958-0.23047 3.4221-0.749 1.9677s1.4821 2.6934 2.9672 4.1636 3.9467 3.4506 3.9467 3.4506l4.7245 2.6806s-0.26458 6.3605 0.23046 7.5856l2.4775 6.1313 2.4775 1.711 4.2059 1.9677s0.99009 3.194 0 3.194c-0.99008 0-5.9344-1.2262-5.9344-1.2262l-2.9672-3.194-3.7162-0.4848-0.48973-2.4525-3.7162-3.6788-6.6834-0.96959-1.7285-3.194 0.97946-2.9373-0.97946-2.1958 0.749-3.6788s1.4798-1.9793 0.48973-2.2244c-0.99008-0.24502-1.7285-2.6806-1.7285-2.6806l-3.9755-2.1958-2.9672 1.711-1.7285 3.6788 1.9877 2.6806 0.23047 8.8119s-1.2387 1.2443-1.2387 2.2244v6.1312l4.4652 2.1958v3.6788s1.7285 0.73732 1.7285 2.4525 1.7285 5.8746 1.7285 5.8746l0.25927 1.9677-1.9877 2.6806s0.48329 7.8476-0.25927 7.3575c-0.74256-0.49005 5.4735 3.9069 5.4735 3.9069s-0.99009 3.9354 0 3.9354h3.6874s3.7333 5.1512 3.4857 6.1312c-0.24751 0.9801 7.9221 6.1027 7.9221 6.1027l10.63-0.22814 3.4569-0.9696 3.4857 4.8765 2.4775 3.194 2.2182 5.3898 0.25927 4.905s-0.7672 2.442-1.7573 3.4221c-0.99009 0.98009-0.97947 7.6142-0.97947 7.6142l-3.2265 2.4525-3.1977-3.194-4.4652 1.4544v3.194l2.9672 4.6484s-2.4775-1.7152-2.4775 0 2.9672 4.1636 2.9672 4.1636l1.9877 4.4202-0.74901 9.81 4.6957 3.1654 3.4857 3.9354 5.6751 0.22814 3.7162 4.905 1.2387 4.4202 3.7162 3.194 0.749 4.3917 5.1854 1.9677 0.48973 1.2262s-0.74257 1.2157 0 2.1958c0.74256 0.9801 1.7573 4.905 1.7573 4.905l7.4036 6.616 2.7368 2.2244-0.25922 5.1331 2.2469 2.1958 0.23046 2.9373 3.2265 0.51331s2.2365 0.7362 3.2265 1.2262c0.99011 0.49005 4.9262 3.1654 4.9262 3.1654l2.247 6.1312 3.9467 3.4221 1.2387 0.99811c1.2376 0.9801 5.4447 0.9696 5.4447 0.9696l3.9754 3.194 1.4692 3.1654s0.7544 1.9857 0.2592 2.9658c-0.495 0.9801-3.2264 3.4221-3.2264 3.4221v6.3594l2.4775 1.9677 3.9754 1.4829 3.1977 2.424 1.2388-2.424 4.6956 2.1958 1.498 3.6788 2.4775 4.1636s-2.2416 0.98873-2.7368 3.194c-0.495 2.2052-0.9794 5.8746-0.9794 5.8746l-1.4692 4.1636s2.4486 2.2086 2.4486 3.6788v5.1331c0 0.9801-0.7202 2.4525-0.7202 2.4525l3.457 1.711 1.498 4.4202-3.4857 3.194s0.7595 2.6754-0.2305 3.1654c-0.9902 0.49005-1.9878 4.905-1.9878 4.905l5.9344-0.48479 5.2142 4.4202 1.7285 3.9069s0.4791 1.466 1.4692 1.711c0.9901 0.24503 6.1937-1.711 6.1937-1.711l7.4323-1.2262s-0.2633-1.2262 1.4693-1.2262 6.2066 0.4848 7.6917 0.4848 5.1854 1.2262 5.1854 1.2262 7.4323-0.72345 7.4323 0.25665 0.2552 2.4356 1.9878 2.6806c1.7327 0.24502 2.2182 1.9677 2.2182 1.9677l5.9344-2.1958s-1.2248 1.4544 1.498 1.4544c2.7227 0 8.6423-0.22814 8.6423-0.22814s4.7203 0.96959 6.4529 0.96959c1.7327 0 4.955 2.7092 4.955 2.7092s3.7003 3.4116 5.1854 4.3917c1.4851 0.98011 1.973 4.4202 4.6957 4.4202s4.2059 2.6806 4.2059 2.6806l0.5185 4.4202 6.1649 5.3898s3.7174 0.74146 4.9549 0.74146c1.2376 0 6.1937 3.9069 6.1937 3.9069l4.9549 0.25665h8.6712l0.4898 2.9373 6.4241-1.9677 11.379 0.25665 5.9632 4.1636s0.9795 1.4788 0.9795 3.194 2.2182 5.3898 2.2182 5.3898l-0.9795 6.1312-1.2387 3.1654s1.4874 3.9354 2.4775 3.9354 7.9221-0.25666 7.9221-0.25666l1.9877-3.9069 4.6957 0.96959 5.7039 0.25666 4.6957 5.8746 3.7162 3.9069 3.4569 1.2262 4.206 2.4525 5.7039 1.9677 1.7284 3.9069s-0.5003 4.6769 0.4898 4.6769 6.1936 0.22814 6.1936 0.22814l3.457 3.9354 4.206 3.6788 4.2058 3.4221 4.4653 6.8442 2.7079 4.905 3.7163 5.8746 1.9877 6.1312 1.2387 5.8746-0.2593 6.8727-0.9794 2.7092 1.7284 3.6502s-0.24 4.4318 1.9877 4.6769c2.2277 0.24503 4.6957-0.99811 4.6957-0.99811l3.7162 5.9031 0.7491 2.9373-4.4653-5.3898h-2.2181s2.4666 5.8746 3.4569 5.8746c0.9901 0 1.9877 5.1331 1.9877 5.1331l163.86-14.202 1.2388-2.7092s5.9237 2.7092 6.9138 2.7092 4.4652-2.4525 4.4652-2.4525 0.5078-5.6412 1.498-6.1312c0.99-0.49005 2.9671-1.9677 2.9671-1.9677l-0.7489-11.008-4.9549-2.4525-7.663-1.4829-3.2264-3.4221s0.5079-4.9114 1.498-5.6465c0.9901-0.73507 1.21-5.1331 1.21-5.1331l-4.206-6.3594s2.4775-3.6799 2.4775-4.905-1.7157-3.4454-0.2304-3.9354c1.4851-0.49004 6.4357-3.6682 6.6834-4.6483 0.2474-0.9801 3.4569-8.3271 3.4569-8.3271l0.4897-3.4221 2.9672-9.3252s0.4897-4.9061 0.4897-6.1312-0.2305-6.8442-0.2305-6.8442l-2.7367-5.3898 5.4447-3.9354 3.9754-6.1313 0.749-4.1635s3.4486-2.6986 6.9139-3.6788c3.4653-0.98011 7.6916-3.6502 7.6916-3.6502l2.5-6.85s-2.2536-3.6682-2.996-4.6484c-0.7426-0.98009-13.597-10.551-13.597-10.551l-0.2593-6.3594-6.4241-7.8423-2.9672-9.5534-6.6834-7.1008-0.4897-10.067-311.84-287.57-53.266-50.134z\"}}),_c('path',{staticStyle:{\"fill-rule\":\"evenodd\",\"fill\":\"#ffffff\"},attrs:{\"id\":\"path2822-0-7-6\",\"inkscape:connector-curvature\":\"0\",\"d\":\"m1322-200-269.03 1.2188c-0.4153 2.6162-1.891 5.9276 1.25 7.3438 5.3839 7.251 5.5117 16.766 8.6875 24.938 0.9894 7.0268-1.4491 14.193-0.4375 21.281-5.8778 3.2833-1.155 11.504-5.125 16.188 3.7826 8.85 1.7449 19.058-2.8438 27.125-1.91 11.453-11.936 19.69-14.5 30.75 2.4583 4.279 1.9248 9.4398 3.2188 14 3.0406 4.8013 10.199 6.2535 13.844 10.906 3.8718 3.8808 5.7944 9.0882 9.9063 12.75 4.5478 6.1709 9.4814 12.428 10.75 20.125 3.2939 6.1739 4.6732 12.802 4.2812 19.75 1.5211 4.6099 1.8729 10.605-2.3125 13.719-0.6522 2.2848-0.6003 4.1851 1.5313 5.5312 2.006 3.7925-0.7604 8.715 3.0312 11.812 4.2973 6.5755 6.0489 15.465 3.4063 22.656 5.5849 4.7622 9.9935 10.839 15.688 15.5 4.3719 5.522 7.2969 12.398 14.062 15.531 5.6026 4.0099 10.423 9.62 12.5 16.125 6.8381 5.211 8.8826 15.231 8.5312 22.844 5.2879 1.6161 7.3549 8.6424 12.719 9.4688-1.4329-4.6226-1.878-9.909 1.6875-13.812 4.3553-4.4723 10.976-7.5562 17.25-7.3438 7.0925 1.6498 13.017 7.5481 15.719 14.031 1.862 5.1188-1.2949 10.704-4.5937 13.688 2.2712 3.9145-0.346 10.705 5.5312 12 3.9181 1.5337 9.3874 4.6482 6.5625 9.4375-1.0849 4.541 1.5657 9.4108 6.3125 10.125 8.9315 6.758 1.1058 24.17-10.062 20.469-4.7648-0.83827-9.3163-3.4414-13.062-6.0625 1.0094 3.8678 1.1892 8.205-0.1562 11.938 3.6042 1.4022 4.2721 5.4338 7.0312 7.6875 1.9831 3.3976 4.2292 8.7893 9.3438 7.0625 5.8699-2.1625 12.801-1.2079 16.688 4 7.4007 8.4856 12.17 20.703 7 31.531 0.201 5.298-3.6253 9.7826-6.7813 13.281 1.3888 4.3474-2.6245 11.964 3.4688 13.281 6.0217 1.6352 11.547 5.5091 13.25 11.75 2.5891 6.0767 8.1754 10.114 11.531 15.375 0.7906 3.1843 1.57 6.8485 5.125 7.9062 4.2406 3.2278 7.8517 7.8829 8.375 13.312 6.2876 2.4549 12.235 6.8173 14.031 13.562 1.9276 2.9273 6.2364 0.81658 8.6562 3.5312 6.7468 4.0926 10.623 12.853 8.3125 20.406 8.7069 0.91261 14.58 9.8222 16.75 17.625 1.3891 4.4186-1.7167 8.055-3.6875 11.469 0.012 3.8563 1.3049 7.98 2.4375 11.438 3.6561 4.009 2.9383 10.159 2.3438 14.719 2.1407 1.387 3.7161 6.5216 6.75 3.8125 9.0606-3.5814 18.657-0.63532 27.906-0.28125 3.8138-0.17467 6.6368 4.493 10.094 1.9062 3.4949-1.1203 7.3159 0.0522 10.125 2.0938 2.2614-0.17757 4.4306 0.041 6.5312 0.5h343.25c-2.9016-4.9562-7.2349-9.4011-7.875-15.219-4.4311-5.0972-9.331-11.286-8.3437-18.375-4.2134-4.8815-10.097-7.9778-14.125-13.094-117.6-108.43-235.3-216.85-353-325.24 0.2-86.031 0.3-172.06 0.5-258.09z\"}}),_c('path',{staticStyle:{\"fill-rule\":\"evenodd\",\"fill\":\"#ffffff\"},attrs:{\"id\":\"path2822-2\",\"d\":\"m23.344 10l-0.594 6.125c-0.145 2.439 4.164 3.541 4.219 6.5 2.639 7.252 3.59 15.036 6.093 22.281 1.114 10.027-2.943 19.769-3.624 29.563-1.403 3.04-3.802 6.657-1.032 9.719 3.164 9.092-1.255 18.312-5.125 26.312-0.494 5.01 3.384 8.96 5.625 13.06-3.25-0.31-8.394-4.7-11.25-1.75-0.624 6.34-6.653 10.51-7.656 16.63 3.732 5.73-0.2229 15.01 7.25 18.25 6.269 4.06 12.543 8.74 15.562 15.65 7.489 7.11 13.544 15.88 15.594 26.07 3.156 8.27 5.573 18.07 3.094 26.62-1.996 3.53-3.936 8.27-0.844 11.63 1.85 4.24 0.246 12.19 6.75 12.5-0.087 6.05 1.7 12.02 1.25 18-2.629 4.67 4.075 6.85 6.063 10.53 4.4 4.53 10.123 7.93 12.75 14.03 4.537 8.53 15.269 11.38 19.687 20.06 1.704 2.99 2.059 6.33 5.314 8.1 3.91 4.83 5.39 11.32 6.34 17.31-1.64 4.41 4.06 4.78 5.69 7.87 1.52 1.59 4.35 5.4 6.47 4.69-3.58-7.49 1.57-16.03 8.87-18.81 9.42-6.16 21.05 1.87 25.44 10.4 1.91 5.14 0.33 11.49-4.06 14.85 2.27 2.89 0.22 7.72 2.31 10.03 6.44 2.9 11.95 9.94 9.85 17.28 2.17 4.07 9.05 4.25 9.74 9.66 2.87 8.7-6.4 19.21-15.37 15-3.94-0.71-8.57-3.99-11.13-5.25 0.84 3.94 0.74 8.1-0.53 11.93 5.01 4.09 8.34 10.1 12.88 14.38 5.77-0.27 12.4-2.51 17.56 1.47 6.21 5.27 10.54 13.12 11.85 21.15 0.97 6.4-2.1 12.19-3.16 18.28-1.06 3.11-3.61 5.77-5.72 7.85 1.45 4.67-2.69 12.78 4.34 13.81 6.09 1.51 11.01 5.9 12.72 11.97 3.07 7.3 11.08 11.06 12.56 19.06 1.74 3.82 6.8 4.8 8.79 8.78 3.11 3.09 1.88 8.84 6.75 9.79 5.39 2.4 9.3 7.14 11.03 12.65 3.53 1.88 8.26 1.38 11.09 4.91 5.46 4.36 6.8 12.61 6 18.4 9.38 1.91 15.45 11.57 16.97 20.38 0 0.81-0.19 1.56-0.47 2.28h381.63c-119.66-110.31-240.18-219.69-359.07-330.81-0.48-86.4-0.97-172.79-1.46-259.19h-267.04z\"}}),_c('path',{staticStyle:{\"fill\":\"#b71234\"},attrs:{\"id\":\"path3236\",\"d\":\"m124.55 174.33 13.394-41.317-35.28-25.474 43.771 0.00004 13.529-41.207 13.529 41.207h43.771l-35.28 25.474 13.383 41.319-35.404-25.475-34.596 24.914z\",\"inkscape:connector-curvature\":\"0\"}}),_c('g',{attrs:{\"id\":\"g3045\"}},[_c('g',{attrs:{\"id\":\"g3049\",\"transform\":\"translate(30 20)\"}},[_c('path',{staticStyle:{\"fill\":\"#584528\"},attrs:{\"id\":\"path2302\",\"inkscape:connector-curvature\":\"0\",\"d\":\"m364.52 370c-0.47804 0.0214-0.68448 1.0052-1.1136 1.3054-0.88853 0.89016-2.5946-0.58119-2.9317 0.9735-0.26524 0.94683-1.7856 1.1494-2.4999 0.86287-0.0995-1.9465-1.7071-0.6582-2.659-0.0885-0.83566 1.0258-2.2708-0.14797-3.2272 0.0221-0.64464-0.23612-1.6977-0.10031-1.3636-1.0177 0.75379-0.5507-0.17838-2.1586-0.72724-1.1062-0.75385 0.14716-0.25727 0.61427-0.88635 0.68587-1.2097 1.0691-0.12091-1.6879-1.5227-1.0841-0.39522 1.4236-2.2171 1.6236-3.6135 1.5709-1.1297 0.10984-2.1681 0.67292-3.3408 0.50888-0.0774-0.002-0.11898 0.0323-0.15908 0.0663l-5.1816 0.15487-5.9543 1.3275c-3.287 0.72823-6.1913 1.3503-6.4543 1.3718-0.51077 0.0417-0.82146 0.11327-1.5227 0.35399-0.31182 0.10705-40.466 9.027-40.635 9.027l-1.4772-0.6195-0.49998-0.0885-0.65907-0.13275-1.3636-0.28762-1.0454-0.68587-0.29546-0.37613h-0.77269l-0.86361 0.4425-0.65907-0.22125-1.0909 0.11063-1.3863 0.53099-0.70453-0.15487-0.86361 0.0885-0.47725 0.24337-0.31816-0.19912 0.0682-0.55313-0.0909-0.90712-0.74997-0.0221-0.56816 0.73013-0.99997 1.0841-0.68179 0.0221-0.56816-0.48675-0.52271-0.39825-0.52271 0.11063-0.18182 0.24336-1.6136 1.5266-0.15908 0.15488-0.65908 0.177-0.70451-0.24338-0.40909-0.24338-0.68178 0.64164-0.52272 1.062-0.56816 0.4425-1.4545 0.39825-0.54543-0.22125-0.40909-0.70801-1.5454 0.26552-0.43182 0.33186-0.36362 0.0885-0.8636-0.92925-0.45453-0.55312-0.5909-0.11063-0.45452 0.17701-0.7727 0.28762-1.1818-0.11063-0.18181 0.708 0.15908 0.28763 0.40908 1.1284-0.38635 0.57525-1.0681 0.354-0.18183 0.46462-0.40907 0.46463-0.61362 0.15487-0.95451 0.17701-0.8636 0.26549-0.54544 0.22125-1.4318 0.531h-0.88633l-0.40908-0.15488-0.65907 0.28763-0.95451 0.15488-0.61362-0.55312-1.2272-0.90713-0.63634 0.50887-1.3409 1.5488-1.2954-0.17701-0.22725-0.84073-0.54544-0.70801-0.54543 0.354-0.29546 0.50888-0.43179-0.0442-0.22727-0.75225-0.0455-0.57525h-0.43181l-0.5909 0.50888-0.47724 0.84075-0.36364 0.19912-0.40907-0.42038-0.31816-0.95137-0.1591-0.6195-0.68178-0.11062-0.13638 0.73012-0.13634 0.46463-0.0909 0.42037-0.24999 1.3054-0.43179 0.4425-0.38637-0.19912-0.2727-0.39825-0.52271-1.239h-0.63635l-0.20454 0.99562-0.59089 1.0178-1.9317 2.1904-1.5454 0.24338-0.68178-1.7036-0.29546-0.0885-0.22725 0.42037-0.45455 1.4824-0.68178 0.15488-1.0454 0.13275-0.52271 0.35399-0.47726 0.0443-0.13635-0.39824-0.38636-0.708-0.52271 0.59737-0.29544 0.885-1.4772 0.9735-1.4999 0.0663-3.1817 2.0134-0.97725-0.24337h-0.68178l-1.9772 1.062-1.1591 0.33188-1.6363 0.48674-0.88634 0.0442-0.59089-0.17701-1.2727 0.24338-1.5909 0.50887-2.8863 0.6195-0.47726 0.0221c-1.0413 0.78915-2.143 1.2506-3.3862 1.6151-0.35902 0.002-1.0898 0.16962-1.75 0.42037-0.51709 0.19643-0.54733 0.22021-0.59089 0.50887-0.15509 0.3506-0.40775 0.68381-0.29545 1.062 0.72692 0.52627 2.7627 0.80318 4.318 0.77437 0.12154 0.15527 1.2145 0.15415 1.4772 0 5.7556 0.0415 10.376-0.50744 15.409 0.30974 1.0501 0.22337 2.1682 0.32311 2.4999 0.24338 2.115 0.009 4.2145 0.0562 6.318 0.13275 0.58219-0.008 1.1764-0.04 1.7726 0 0.52605-0.0155 1.8896-0.0473 3.0226-0.0663 2.447-0.0411 4.0086-0.11235 4.1135-0.19913 2.1215 0.87087 4.2706 0.75022 6.318 0.88495 0.24802 0.11864 1.2671 0.17796 3.9317 0.24338 0.56358 0.0194 1.1868 0.12012 1.7272 0.0663 7.4703-0.4415 14.442-1.1878 21.84-1.593 1.243-0.0823 2.591-0.26823 3.7044-0.30975 0-0.0102 1.2866-0.041 3.0681-0.0885 0.65033-0.027 1.3136-0.0727 1.9318-0.0663 0.41539-0.13586 2.9055-0.17553 4.0453-0.0663 7.3268 0.41011 13.969 0.28898 21.227 1.0177 0.32678 0.10134 1.416 0.18526 1.909 0.15487 6.1451-0.0202 11.546 0.52752 17.727 0.66369 1.2424 0.0779 2.4911 0.003 3.7272 0.177 1.4926 0.073 2.9433 0.0859 4.4317 0.28763 0.33405 0.0182 0.6563 0.057 0.70452 0.0885 4.4006 0.57394 9.0605 0.61896 13.409 1.2832 0.34294 0.10287 2.0132 0.11763 2.159 0.0221 0.72928-0.0269 1.4556-0.13109 2.1818-0.19912 0.88217-0.004 1.6626-0.44287 2.2272-0.0443 0.15563-0.10145 1.2348-0.15157 1.4318-0.0663 1.8011-0.30613 3.6065-0.0183 5.4316-0.11062 1.8354-0.0229 3.6469-0.16084 5.4771-0.24338 1.1802-0.0312 2.3445-0.24164 3.5226-0.22125 0.52216 0.006 1.0658 0.0351 1.5908-0.13275 0.37854-0.0708 0.89457-0.10804 1.2954-0.0885 2.3361-0.049 4.6481-0.56532 6.9998-0.44249 1.8408-0.30103 3.5585-0.27432 5.2726-0.48675 2.1598-0.0103 4.2746-0.53808 6.4543-0.531 3.5676-0.19212 7.1044-0.43742 10.591-0.73013 2.7047-0.15345 6.1476-0.49142 8.0452-0.50884 4.5923-0.0643 10.267-1.0035 14.09-0.97349 1.1182-0.0923 2.2433 0.0166 3.2726-0.0885 1.6636-0.003 3.1674-0.23842 4.8635-0.24337 2.8898-0.36683 5.7271-0.51341 8.9315-0.59737 0.16425-0.0671 0.69107-0.11378 1.4545-0.13276 0.86307-0.0362 1.6374-0.30987 2.4772-0.19911 2.8138-0.24544 5.7559-0.27252 8.5452-0.30977 0.0318 0.0546 0.28386 0.0727 0.74997 0.0443 0.815-0.0498 0.83356-0.042 1.5227-0.0221 3.38 0.23706 7.2226-0.0642 10.454 0.0442 5.1541 0.33769 10.785 0.39629 15.954 0.50881 5.8821 0.1879 12.044 0.21899 17.636 0.9071 10.948 0.69697 18.849 0.008 28.272 0.90696 1.1688 0.13915 2.3426 0.24365 3.5226 0.19913 0.25172-0.004 2.7878 0.0638 3.2044 0.0885 5.6834-0.11236 12.825-0.42852 15.909-0.46466 2.2506-0.0262 3.6438-0.0638 3.659-0.11063 9.5683-0.397 16.37-1.6881 25.931-1.3939 3.7335-0.44339 7.4335 0.44905 11.204 0.30984 0.31851-0.0128 0.62896-0.0106 0.95451-0.0442 0.62708-0.0272 1.1483 0.044 1.7954 0.11064 0.80265-0.0308 1.6308-0.11104 2.659-0.30976 1.2031-0.4028 1.6687-1.3163 1.5908-2.6329-0.0588-0.71771-0.19499-0.93885-0.65907-1.1062-0.70528-0.34551-1.4808-0.59021-2.1363-0.9735-0.3307-0.17605-1.1888-0.50887-1.2954-0.50887-0.26858-0.2394-0.46434-0.51142-0.79543-0.68587-0.14765-0.13974-0.43705-0.29286-0.72724-0.37613-0.58131-0.4868-1.109-1.0233-1.7272-1.4602-0.29792-0.27288-0.47986-0.36451-0.81816-0.37612-0.71452-0.0246-1.4147-0.17688-1.5454-0.33188-0.0966-0.11462-0.19886-0.1234-0.36362-0.0885-0.17492 0.0371-0.24967-0.004-0.4318-0.17701-0.20549-0.32869-0.40046-0.86814-0.7727-0.92924-0.14195 0.0378-0.21611 0.009-0.3409-0.17701-0.16897-0.39519-0.25856-0.79892-0.61362-1.1062-0.34484-0.20904-0.66502-0.52427-1.0909-0.6195-0.0304-0.0968-0.51093-0.21842-0.8636-0.22125-0.22404-0.002-0.29398-0.054-0.49999-0.37613-0.13026-0.20364-0.27154-0.56059-0.31816-0.79649-0.11945-0.6041-0.25105-0.84309-0.54545-0.9735-0.33632-0.147-0.43017-0.46124-0.88632-0.2655-0.20265 0.01-1.0899 0.34406-1.2954 0.48674-0.1309 0.0912-0.34953 0.11124-0.97724 0.0885-0.44346-0.0161-0.84191-0.0179-0.88633-0.0221-0.39185-0.52043-0.7649-1.1094-1.3181-1.5045-0.0584 0-0.27224-0.16098-0.47726-0.354-0.32711-0.30794-0.40715-0.33187-0.70452-0.33187-0.47142-0.41562-0.83289-0.72249-0.97725-1.3496-0.15683-0.13802-1.1818-0.15846-1.1818-0.0221 0 0.24586-0.73605 0.35946-0.99997 0.15487-0.0746-0.0578-0.18541-0.2096-0.24998-0.354-0.0869-0.19404-0.19603-0.2833-0.38636-0.33187-0.14162-0.0361-0.41129-0.11738-0.61361-0.177-0.47887-0.14106-0.86802-0.0991-1.159 0.13274-0.12887 0.10269-0.37348 0.27496-0.54544 0.37613-0.1369 0.16519-0.34543 0.27539-0.40908 0.48675-0.16902 0.0598-0.66092-0.0735-0.72725-0.19912-0.16625-0.16175-0.39736-0.28122-0.49998-0.48675 0-0.1396-0.26032-0.10809-0.63633 0.0885-0.32886 0.17192-0.39044 0.15024-0.54545-0.22126-0.11184-0.26801-0.12592-0.39206-0.0682-0.55313 0.16902-0.47129 0.028-1.1872-0.24999-1.2611-0.2099-0.0558-0.79543 0.33335-0.79543 0.531-0.54064-0.34308-0.94982-0.85965-1.0454-2.1682-0.0547-0.13137-0.13582-0.30106-0.15909-0.37613-0.0681-0.21923-0.31482-0.14647-0.59088 0.15488-0.33516 0.35356-0.68455 0.7155-0.90907 1.1505-0.10905 0.2646-0.27162 0.33153-0.49999 0.22124-0.14089-0.068-0.16264-0.17515-0.20452-0.531-0.0403-0.34129-0.0894-0.45741-0.22727-0.55312-0.16503-0.11464-0.22059-0.0998-0.61362 0.0885-0.41279 0.68938-0.93876 1.725-1.8636 1.239-0.16496-0.45997-0.014-1.2701 0.31817-1.77l0.20454-0.33187-0.20454-0.531c-0.25515-0.3312-0.36656-0.88015-0.74998-0.90712-0.3834-0.027-0.89235 0.34375-1.1136 0.708-0.18647 0.18472-0.20644 0.60339-0.56816 0.55312 0 0.15933-0.28964 0.0566-0.54544-0.19913-0.15014-0.15011-0.31315-0.26691-0.36362-0.2655-0.21333 0.006-0.67846 0.43245-0.81815 0.75225-0.10715 0.24534-0.21975 0.34547-0.36362 0.37613-0.20215 0.16074-0.4407 0.28221-0.61362 0.48674-0.1294-0.16926-0.40253-0.30855-0.45453-0.57524-0.1834-0.24715-0.22137-0.64341-0.0682-0.77438 0.1561-0.13346 0.21804-0.55188 0.0909-0.66375-0.20094-0.36985-0.22055-0.79711-0.72725-0.92924-0.20049 0-0.34818-0.28164-0.4318-0.84075-0.0379-0.25252-0.0259-0.42245 0.0909-0.68588-0.15-0.69021-0.23026-1.2912-0.90908-1.6815-0.12864 0-0.4318 0.46891-0.56815 0.885-0.19943 0.18369-0.30761 0.46743-0.61361 0.57525-0.34244 0.363-0.66993 0.17104-0.9318-0.531-0.20408-0.54714-0.35285-0.74924-0.61361-0.81863-0.20805-0.0554-0.37331 0.0478-0.52271 0.354-0.0805 0.16518-0.0785 0.35723-0.0227 0.9735 0.0385 0.42531 0.0498 0.88908 0.0227 1.0178-0.0895 0.68357-0.10025 1.4288-0.49998 2.0134-0.25203 0.19628-0.92743-0.28648-0.93179-0.66376-0.002-0.12052-0.0856-0.24961-0.24999-0.37612-0.34219-0.45983-0.58679-0.86584-1.2045-0.97349-0.38765-0.0612-0.65317-0.22784-0.77271-0.46462-0.10494-0.20787-0.13372-0.80504-0.0455-0.86288 0.11294-0.33622 0.28138-0.65368 0.15909-0.99562-0.062-0.16708-0.18134-0.33719-0.25-0.37613-0.35814 0.20167-0.78854 0.35182-1.0681 0.7965-0.40402 0.23564-0.66018 0.46495-1.2045 0.37613h-0.72724l-0.40907-0.50888c-0.62642-0.75632-0.8193-0.64218-0.84089 0.50888-0.26885 0.61368-0.55343 0.98531-1.1136 0.57524 0-0.18616-0.005-0.18323-0.22727-0.13275-0.13152 0.03-0.33557 0.11251-0.45453 0.177-0.11894 0.0645-0.37011 0.12107-0.54543 0.13275-0.17536 0.0117-0.37225 0.0582-0.43181 0.11063-0.0596 0.0525-0.18144 0.0709-0.27271 0.0443-0.0913-0.0266-7.2769-0.52915-15.977-1.1284l-15.818-1.0841-0.1818-0.24337c-0.26197-0.32603-0.50072-0.37746-0.65908-0.15488-0.0977 0.13716-0.16567 0.1512-0.31816 0.11063-0.19843-0.0528-0.27794-0.0999-0.61362-0.55313l-0.90906-0.354-1.1363 0.0885-0.13637-0.24337-0.13635-0.22126-0.3409-0.28761-0.84088 0.42037-0.36363 0.28763h-0.31816l-0.65907-0.48675-0.72725-0.50888-0.59089 0.39825-0.81816 0.0663-0.79543-1.1505-0.93179-0.19912-0.13636 0.26549-0.45451 0.55312-0.31818 0.17701-0.72726-0.46463-1.0227 0.30975-1.0454-0.48674-0.74999-0.81863-0.65906-0.24338-0.77269 0.24338-0.56816-0.39825-0.47727-0.708-1.1136 1.0399-0.52271-0.26551-0.61361-0.24337-0.54543 0.33187-0.70453 1.3496-2.4772 0.22126-0.20455-1.416-0.18182-0.64162-0.38634 0.42037h-0.61361l-2.0454-0.24337-0.29545-0.75225-0.29544-0.7965-0.56816-0.2655-1.0454 1.3717-0.38635 0.24338-0.36363-0.0442-0.31816-0.46463-0.54544-0.354-0.7727 0.46463-0.74999 0.81861-0.34089 0.28764-0.79542 0.177-0.15909-0.42038-0.0455-0.708-0.15909-0.99562-0.54544-0.11063-0.90905 0.79651-1.5227 1.1947-0.0682-0.73013-0.4318-0.97349-0.56816 0.37612-0.40907 0.81863-0.79543-0.37613-0.65907-0.66374-0.3409-0.15488-0.34088 0.11062-1.3409 1.3717-1.409 0.66376-0.54544 0.19912c-0.0317-0.006-20.469 2.7355-32.145 2.9076-11.676 0.17208-10.412-2.2881-10.467-2.2881-0.0805 0-0.0808-0.1322-0.0455-0.66374 0.036-0.54019 0.004-0.68579-0.0909-0.7965-0.10972-0.25413-0.23541-0.5088-0.34088-0.75225-0.075-0.0796-0.13636-0.17902-0.13636-0.24337 0-0.0643-0.0656-0.1271-0.13636-0.13276-0.34288-0.0279-0.8101 0.0214-0.90906 0.11062-2.2306-0.33308-3.1294 1.1721-4.5226 1.5266-0.24991 0-0.35012 0.0327-0.38636 0.13275-0.0267 0.0739-0.1699 0.26908-0.31816 0.42037-0.14824 0.15126-0.27952 0.32381-0.29544 0.37613-0.0222 0.0732-5.436-0.19166-23.499-1.1505 0 0-0.98439 0.0577-1.9772 0.11063 0.006-0.0429 0.007-0.0995 0.0227-0.13275-0.85594 0.29649-1.4308-1.3209-2.409-0.84076-1.0759 0.71475-1.5021-0.32884-1.6818-1.1505-0.74077 0.24062-1.8517 1.3297-2.909 0.90712-0.99982-0.93376-2.3646 0.72191-3.5908 0.39825-0.27763-0.21039-0.92326-1.6634-1.2272-1.0399-1.2612 0.94992-0.31067-1.6703-1.5909-1.4381-0.13633 0.67706-0.99121 1.1976-1.0681 0.13274-0.23539-0.26541-0.43155-0.36113-0.59089-0.35399z\"}}),_c('path',{staticStyle:{\"fill\":\"#008542\"},attrs:{\"id\":\"path2302-9\",\"inkscape:connector-curvature\":\"0\",\"d\":\"m364.53 375c-5.1562 3.6214-11.953 2.4193-17.531 0.90625-22.92 1.5579-45.019 10.013-67.781 12.75-3.8634-2.4462-8.2745-0.9613-12.125-0.9375-4.8637-0.26903-8.3409 5.5389-13.562 3.0938-2.8094 0.017-4.6939 3.7174-7.9062 3.8125-3.2354 1.0145-6.4499 0.0415-9.4688 1.4375-2.718-0.34969-5.2512-1.7056-7.5938 0.375-4.6005 3.5485-10.646 2.7201-15.469 5.9062-4.0559 1.4576 6.209 0.72409 8.3125 1.125 11.288-0.31269 22.552 1.8544 33.839-0.0946 22.393-2.6759 44.916 0.44869 67.346 1.0662 26.156 3.2531 52.368-1.0703 78.526-2.3019 29.364-2.557 58.856-3.255 88.281-1.2815 23.147 0.92489 46.33 2.2766 69.445-0.10706 6.9106-0.53704 15.412-0.50881 21.438-0.53125-3.9481-1.2856-6.1589-5.7265-10.688-5.7812-2.8647-1.6063-5.4237-4.7088-8.9688-3-3.6176 0.72349-4.9376-4.9922-8.625-2.6875-2.2853-0.65459-3.4702-1.748-5.9062-1.0938-2.4918-0.58411-2.4951-3.7081-5.2188-2.0312-2.7265 0.5416-4.1859-2.3627-6.0938-3.2812-8.0801 2.0353-16.549-0.97741-24.844-0.5-9.1793-0.60774-18.32-2.1184-27.219-3.875-2.9542-2.0001-5.5732 2.4998-8.7188 0.46875-3.702-2.96-8.0378-1.6631-12-0.375-2.5664 0.38058-3.9184-2.4583-6.375-0.3125-6.9126 1.7366-14.381 1.1621-21.469 2.5625-7.901 0.50291-16.722 1.7154-24.031-1.5625-1.0242-2.4347-2.1649-1.5174-4.25-0.625-8.579 1.4217-17.264-1.4361-25.938-0.59375-3.8624-0.86547-7.6812-1.8342-11.75-0.78125-1.1388-0.69372-2.3801-1.4436-3.6562-1.75z\"}})]),_c('path',{staticStyle:{\"fill\":\"#584528\"},attrs:{\"id\":\"path2180\",\"d\":\"m294.9 419.94c-0.54587-0.20634-0.97137-0.15317-1.5588-0.29912-0.6432-0.0188-1.1884-0.0378-1.7983-0.0447-0.24973-0.0791-0.63642-0.15023-0.85932-0.15811-0.53305-0.18616-0.96638-0.57952-1.4868-0.89374-0.34174-0.25888-0.72912-0.43169-1.0959-0.62486-0.629 0.15583-1.2306 0.0437-1.8751 0.0698-1.2181 0.0417-2.3799 0.38915-3.6231 0.45249-0.24331 0.32804-0.64457 0.61335-0.98045 0.89812-0.21001 0.0359-0.40089 0.0199-0.46557-0.039-0.15692-0.14293-0.1196-0.62537 0.0672-0.86824 0.0844-0.29258 0.30888-0.47979 0.46467-0.72179 0.1762-0.44074 0.47866-0.60624 0.75562-0.98232 0.0387-0.14061 0.15888-0.36878 0.26696-0.50704 0.37081-0.47434 0.16643-1.0074-0.33218-0.86627-0.12845 0.0363-0.35495 0.14392-0.50332 0.23907-1.0564 0.11046-1.8136 0.46288-2.913 0.69029-0.58083 0.0783-1.1801 0.30359-1.7095 0.4547-1.1116 0.74279-2.463 1.0896-3.7642 1.4451-0.44949-0.10949-0.40937-0.33454 0.109-0.61124 0.25224-0.13465 0.48692-0.32599 0.52149-0.4252 0.0346-0.0992 0.23548-0.2606 0.44647-0.35864 0.68797-0.90629 1.5523-1.6122 2.3456-2.4106 0.70877-0.59999 0.82043-0.78938 0.58946-0.99976-1.5175 0.24203-2.9467 0.92552-4.4892 1.2775-0.44237 0.34722-0.93716 0.57886-1.4262 0.86403-0.66184 0.28103-1.2365 0.64924-1.8209 1.0543-0.26654 0.30331-0.57718 0.2797-0.57633-0.0438 0.00082-0.31403 0.22499-0.62499 0.78697-1.0917 0.21296-0.22904 0.43828-0.44092 0.64219-0.64606 0.33078-0.0942 0.13105-0.49792 0.19438-0.73853 0.0103-0.0509 0.0197-0.43672 0.0208-0.85734l0.002-0.76475 0.52301-0.39639c0.28765-0.21802 0.69844-0.4779 0.91285-0.57751 0.31861-0.21535 0.63192-0.41585 0.95171-0.6263 0.0946-0.1411 1.3425-0.52683 1.7043-0.52683 0.36978 0 0.71012-0.49141 0.92265-1.3322 0.12996-0.5142 0.23554-0.74263 0.35651-0.77145 0.0945-0.0225 0.27048-0.16243 0.391-0.31091 0.76873-0.15716 1.2438-0.73212 1.7834-1.2529 0.0825-0.10783 0.28981-0.22151 0.46063-0.25263 0.49463-0.32967 1.2101-0.89117 1.5062-1.1523 0.82076-0.18473 1.4544-0.82521 2.1027-1.3154 0.22292-0.0378 0.50965-0.45178 0.98445-0.70828s1.3356-0.66812 1.9536-1.0502c0.77804-0.50353 1.3804-0.5548 2.2279-0.61184 0.23337-0.0387 0.63797-0.0608 0.89908-0.049 0.89306-0.13011 1.7488-0.39593 2.6414-0.54894 0.35427-0.0987 0.89565-0.17867 1.2031-0.17768 0.30744 0.001 1.588-0.0301 2.8457-0.0691 1.0589 0.0884 2.0853-0.14942 3.0794-0.34497 0.99724-0.29751 1.864-0.86017 2.7136-1.4403 1.0322-0.5986 1.6213-1.6638 2.4391-2.5105 0.16415-0.50806 0.46147-0.95218 0.70942-1.4202 0.2676-0.57376 0.65505-1.1016 0.99121-1.6216 0.12316 0 0.89074-1.6806 0.85619-1.8746 0.36501-0.33813 0.55493-0.83854 0.8152-1.2961 0.28867-0.46433 0.41823-0.95205 0.6752-1.4578 0.37583-0.55959 0.80364-1.0988 1.2511-1.5737 0.19474-0.24521 0.51447-0.51126 0.74807-0.77382 0.15237-0.58998 0.61332-1.0538 0.94074-1.5107 0.2288-0.0733 1.038-0.87248 1.0401-1.0272 0.43127-0.36649 0.7961-0.85141 1.1633-1.3081 0.90135-1.4442 2.2353-2.5342 3.3115-3.805 0.11646-0.2534 0.22841-0.42001 0.35195-0.64719 0.0826 0 0.2312-0.11392 0.3303-0.25317 0.0991-0.13923 0.32883-0.37266 0.5105-0.51873 0.12673-0.26186 0.40537-0.37746 0.55897-0.52048 0.64117-0.0828 1.0184-0.95575 1.5444-1.4691 0.0346-0.0994 0.15372-0.2024 0.2646-0.22881 0.49513-0.32899 0.49189-0.86168 0.65137-1.3532 0.14208-0.73438 0.40277-0.77329 0.96075-1.2064 0.19196-0.22305 0.39048-0.44162 0.58074-0.65679 0.13266-0.0459 0.2412-0.14873 0.2412-0.22842 0.54027-0.92994 1.0958-1.2486 1.5745-2.0774 0.0623-0.33595 0.0991-0.37578 0.32665-0.35331 1.1474-1.0855 0.95394-1.6351 1.2341-2.2427 0.91281-0.40553 0.75496-1.4452 0.82359-2.4049 0.55667-0.622 0.83069-1.372 1.0718-2.131 0.16686-0.206 0.25408-0.43541 0.25408-0.66827 0.46456-0.49681 0.48012-1.0745 0.64916-1.646 0.17775 0 0.89631-1.6202 1.1495-2.592 0.42136-0.40938 0.52248-1.027 0.53138-1.5356 0.009-0.50857 0.21987-1.2198 0.37528-1.8526 0.26199-0.63505 0.32012-1.2701 0.3803-1.9561 0.24267-0.59049 0.39464-1.2119 0.57918-1.7915 0.45267-0.70843 0.51373-1.4939 0.57901-2.3186 0.11237-0.82536 0.36749-1.3936 0.29059-2.0061 0.17655-0.0229 0.22598-0.11129 0.27553-0.49243 0.0332-0.25545 0.0363-0.57611 0.007-0.71259-0.0472-0.21916 0.14507-0.72734 0.46177-1.2201 0.2838-0.74322 0.50555-1.53 0.716-2.2863 0.6348-0.98752 0.85003-2.1126 1.209-3.4263 0.18885-0.16365 0.33512-0.9247 0.32727-1.7027 0.0785-0.40258 0.39976-0.71244 0.66944-1.0507 0.0969 0.0574 0.17925-0.13638 0.26888-0.20457-0.21655-0.0717-0.73509-0.58539-0.74115-0.73421-0.002-0.0558 0.15594-0.25164 0.35158-0.43512 0.51699-0.4425 0.10942-0.45536 0.20149-0.83851 0.0457-0.73945 0.34261-0.86819 0.5677-1.4138 0.12638-0.21509 0.12025-0.25495-0.0602-0.39152-0.069-0.41299-0.42264-0.57163-0.63288-0.85597-0.5341-0.28644-1.164-0.39545-1.7525-0.54551-0.12292-0.0599-0.27544-0.0193-0.53801 0.14319-0.41732 0.2583-0.7578 0.28795-1.0438 0.0909-0.2804-0.19318-0.62901-0.1732-0.75624 0.0433-0.31637 0.26449-0.65871 0.53079-0.99781 0.78685-0.15234 0.30452-0.37202 0.29375-0.51714-0.0254-0.15801-0.34749-1.0116-0.82001-1.2259-0.67862-0.45967 0.12466-0.59992 0.54493-0.8873 0.86598-0.0883 0.18008-0.17906 0.20829-0.67045 0.20829-0.50354 0-0.6072 0.0343-0.90916 0.30085-0.21368 0.18862-0.44328 0.30086-0.61547 0.30086-0.2126-0.27272-0.61876-0.48701-0.88187-0.74057-0.60963 0.25532-1.0204 0.75194-1.4254 1.2497-0.26909 0.26089-0.62229 0.29939-0.84934 0.0926-0.20358-0.18543-0.56404-0.17645-0.64514 0.0161-0.1711 0.40612-0.41005 0.50069-1.102 0.43612-0.56241-0.0525-0.65212-0.0852-0.60486-0.22087 0.11443-0.3284-0.70008-0.79092-1.0184-0.5783-0.17132 0.11443-0.35354 0.56773-0.35519 0.88362-0.00086 0.16307-0.0366 0.34668-0.0794 0.40803-0.0855 0.12249-0.68034 0.0873-0.86996-0.0514-0.0639-0.0468-0.26167-0.11335-0.43945-0.14795-0.38935 0.15049-0.75506 0.14321-1.1844 0.25753-0.60446-0.0514-0.6606-0.0389-0.98945 0.21966-0.19174 0.1508-0.50099 0.35399-0.68721 0.45155-0.31163 0.16324-0.33383 0.2048-0.27875 0.52192 0.0515 0.29632 0.0245 0.36565-0.19253 0.4952-0.13883 0.0829-0.42301 0.15691-0.63153 0.16458-0.3554 0.0901-0.53726 0.29786-0.83407 0.46242-0.41365-0.30555-0.37207-0.24278-0.7401-0.48293-0.13013 0.0653-0.31634 0.10756-0.41378 0.094-0.51954 0.53079-1.1912 0.86525-1.8143 1.1866-0.65007 0.004-0.78064 0.0941-1.0902 0.75191-0.24912 0.52943-0.67015 0.73038-1.1791 0.56276-0.53805-0.17722-0.77-0.1416-0.77 0.11823 0.20645 0.40444 0.15872 0.83359 0.19934 1.2954 0.10812 0.42519-0.0101 0.70032-0.30097 0.70032-0.26315 0-0.40652-0.27128-0.40652-0.7692 0-0.22609-0.0286-0.54126-0.0635-0.70036-0.0562-0.25593-0.10336-0.28928-0.40904-0.28928-0.26126 0-0.36962 0.0508-0.44439 0.20828-0.0544 0.11456-0.15336 0.27751-0.21997 0.36211 0.0654 0.62971-0.067 1.2019-0.13268 1.8158-0.0252 0.51688-0.13556 0.66455-0.49857 0.66722-0.17951 0.001-0.18882-0.056-0.1341-0.82522l0.0588-0.82662c-1.2871-0.28576-1.3289 0.0803-1.1551 1.2441 0.13951 0.25047 0.25385 0.56996 0.25408 0.70997 0.00037 0.22056-0.0398 0.25457-0.30089 0.25457-0.1973 0-0.33886-0.0639-0.4101-0.18514-0.0598-0.10183-0.19344-0.18514-0.29692-0.18514-0.14494 0-0.20382 0.0952-0.25637 0.41441-0.0851 0.51709-0.20108 0.58562-0.57019 0.33706-0.35723-0.24058-0.77425-0.25737-0.84542-0.034-0.0284 0.0891-0.0823 0.40027-0.11982 0.69151-0.0749 0.58206-0.14587 0.66766-0.62103 0.74952-0.39492 0.0681-0.58692-0.0923-0.39569-0.33055 0.0715-0.089 0.10804-0.26618 0.0813-0.3937-0.0268-0.12751 0.002-0.28748 0.064-0.35548s0.13269-0.44494 0.15718-0.83764l0.0445-0.71402-0.27226 0.019c-0.53293 0.19522-0.64585-0.29458-1.0416-0.47509-0.37625-0.17484-0.46395-0.18195-0.97013-0.0788-0.63214 0.12885-0.76265 0.24019-0.4925 0.42012 0.52533-0.0563 0.63746 0.0321 1.1 0.0554 0.0417 0.14389-0.001 0.25122-0.13919 0.34714-0.17951 0.12485-0.18748 0.1762-0.079 0.50914 0.0664 0.20366 0.2186 0.51608 0.33828 0.69428 0.27885 0.41516 0.42692 1.62 0.20846 1.6964-0.28995 0.10136-0.45449-0.15523-0.50205-0.78292-0.0256-0.33767-0.0997-0.70451-0.16479-0.81521-0.12761-0.2172-0.48576-0.37817-0.68658-0.30859-0.23141 0.0802-0.24938 0.60862-0.0413 1.2152 0.22437 0.6542 0.20395 0.80312-0.12092 0.88222-0.29351 0.0715-0.47572-0.15992-0.47572-0.60412 0-0.28571-0.0607-0.39009-0.33989-0.58402-0.19069-0.13248-0.47441-0.23614-0.64634-0.23614-0.29142 0-0.30504-0.017-0.27797-0.34714 0.0157-0.19093 0.0576-0.41467 0.0932-0.49721-0.0525-0.50249-0.58158-0.57901-0.84579-0.77463-0.0668 0.0608-0.19824 0.96431-0.21052 1.4471-0.01 0.38363 0.18676 0.51351 0.50395 0.33308 0.30732-0.17482 0.55063 0.0165 0.57366 0.45104 0.0105 0.19788 0.0635 0.54665 0.11777 0.77505 0.0543 0.2284 0.0613 0.47903 0.0155 0.55695-0.0497 0.0846-0.027 0.23429 0.0565 0.37157 0.15239 0.25076 0.20022 1.2019 0.0605 1.2019-0.0476 0-0.22629-0.0444-0.39718-0.0987-0.35741-0.11349-0.46452-0.37219-0.37209-0.89873 0.0913-0.51994-0.10986-1.0862-0.46841-1.3188-0.30211-0.35054-0.39628 0.11322-0.67151 0.19186-0.36425 0.12614-0.32144 0.61966 0.1155 1.3313 0.29907 0.48713 0.3557 0.67004 0.3557 1.149 0 0.53812-0.0134 0.56967-0.24163 0.56967-0.3349 0-0.50771-0.22067-0.43438-0.55463-0.18553-0.38411-0.70836-1.247-0.84845-1.429 0-0.14653-0.44753-0.79344-0.54889-0.79344-0.30371 0-0.41081 0.26792-0.28219 0.70595 0.0861 0.29332 0.0905 0.46664 0.0152 0.59493-0.13392 0.22795 0.0219 0.80014 0.30812 1.1316l0.87027 1.2119-0.19186 0.35319c-0.10551 0.19426-0.23021 0.35321-0.27709 0.35321-0.12213 0-0.40167-0.38543-0.40167-0.55383 0-0.20936-0.48491-0.64959-0.71553-0.64959-0.17176 0-0.19914 0.065-0.19914 0.47264 0.0888 0.65515 0.18374 1.3155 0.28484 1.9664l-0.0308 0.38437-0.40911-0.0291c-0.40739-0.0289-0.40963-0.0273-0.53316 0.39342-0.0682 0.23237-0.1688 0.4225-0.22348 0.4225-0.0547 0-0.17498-0.13311-0.26734-0.29579-0.14135-0.24898-0.1498-0.36731-0.0534-0.74763 0.2496-0.98496 0.11041-1.3704-0.42758-1.1841-0.55801 0.19323-0.67909 0.75418-0.30626 1.4187 0.22059 0.39316 0.30257 1.6635 0.11644 1.8042-0.11714 0.0885-0.18801 0.0861-0.33447-0.0114-0.14353-0.0956-0.18888-0.25856-0.19921-0.71585-0.0112-0.49439-0.11579-1.0581-0.32115-1.7305-0.0259-0.0847-0.1415-0.10222-0.39207-0.0594-0.30469-0.34876-1.0208-0.18098-1.0259-0.18188 0.0377 0.13684 0.0152 0.29623-0.0523 0.37028-0.0136 0.10958 0.33916 0.27334 0.53965 0.43491-0.22979 0.2681-0.21662 0.55868 0.0378 0.83409 0.18912 0.20471 0.24639 0.36088 0.22356 0.60953-0.0267 0.29033-0.0641 0.33312-0.28478 0.3253-0.13974-0.005-0.33411-0.0407-0.43193-0.0793-0.16957 0.082-0.33792 0.88444-0.37917 1.0603-0.24721 0-0.37083 0.36611-0.21384 0.63329 0.12483 0.21247 0.15085 1.1844 0.0335 1.2504-0.0422 0.0238-0.19968 0.0218-0.34988-0.004-0.26391-0.046-0.27139-0.0642-0.22277-0.54365l0.0503-0.4961-0.37343-0.14211c-0.6817-0.25944-1.0116-0.11568-0.7512 0.32742 0.16181 0.2754 0.25742 1.9373 0.11145 1.9373-0.0595 0-0.15718-0.0833-0.21701-0.18515-0.25014-0.4257-0.6327-0.10714-0.70989 0.59113-0.0438 0.39584-0.0857 0.47344-0.2556 0.47344-0.22879-0.25249-0.34443-1.1014-0.40653-1.4117-0.11179-0.0127-0.30611 0.0499-0.43181 0.13918-0.0669 0.54963-0.32228 1.2763-0.45762 1.6724-0.20757-0.0268-0.23126-0.0868-0.25855-0.65441-0.022-0.45791-0.0677-0.62485-0.17101-0.62485-0.1553 0-0.2067 0.12151-0.31261 0.73905-0.0755 0.44042-0.48343 1.0198-0.71796 1.0198-0.21292 0-0.1743-0.55462 0.0743-1.0664 0.18223-0.46972 0.19496-0.99646 0.24184-1.4917 0.20175-0.43979 0.0988-0.6647-0.34063-0.74443-0.29484-0.0109-0.57886-0.0792-0.86664-0.11863-0.38847-0.20368-0.31848-0.685-0.40976-1.0757 0.17357-0.45389-0.45246-0.29245-0.70582-0.45621-0.40253-0.54605-0.8097 0.20493-0.91667 0.232-0.0506 0.28798-0.10992 0.37028-0.26707 0.37028-0.1802 0-0.20206-0.0629-0.20206-0.58111 0-0.64311-0.16151-0.94752-0.57956-1.0923-0.14861-0.0515-0.23266-0.13901-0.2024-0.21084 0.09-0.21374-0.10276-0.39597-0.30747-0.29057-0.0995 0.0512-0.38675 0.0919-0.63829 0.0903-0.4538-0.003-0.45708-0.005-0.42426-0.30145 0.0278-0.25074-0.00097-0.29861-0.17924-0.29861-0.42258 0.25762-0.69051 0.0324-1.0879 0.0496-0.37483 0.0964-0.90228 0.0732-1.157-0.051-0.50347-0.34807-0.48193 0.35235-0.66564 0.48667-0.0674 0.0614-0.65124-0.22215-0.65221-0.31674-0.001-0.13112-0.32826-0.35375-0.51947-0.35375-0.10969 0-0.33355 0.12497-0.49747 0.27771-0.34999 0.32612-0.80355 0.37704-0.88333 0.0992-0.0353-0.12287-0.17665-0.19782-0.4535-0.24043-0.33425-0.0514-0.46662-0.0213-0.78314 0.17854-0.45574 0.13659-0.96562 0.35664-1.3648 0.47931-0.12152 0.21125-0.20708 0.24134-0.74007 0.26029-0.91426 0.0325-1.3005 0.30299-1.7641 1.2356-0.0974 0.19584-0.14468 0.20412-0.85376 0.14953-0.89461-0.0914-1.2951 0.66212-2.1598 0.98542-0.50981 0.0459-0.78273 0.44328-1.059 0.68558 0 0.29152-0.0349 0.32613-0.46311 0.45903-0.64084 0.19889-1.3581 0.62898-1.3625 0.81706-0.005 0.21816-0.0519 0.23379-1.0757 0.35994-0.65055 0.007-1.1917 0.3101-1.7464 0.54808-0.18481 0.19661-0.81934 0.259-0.99781 0.0981-0.0603-0.0544-0.3624-0.0197-0.80576 0.0926-0.88028 0.22294-1.2323 0.22748-1.3646 0.0176-0.39718 0.0521-0.98794-0.0354-1.4437-0.0638-0.1805-0.13835-0.48145-0.24691-0.7769-0.28024-0.26524-0.0299-0.81073-0.0975-1.2122-0.15018-0.40146-0.0527-0.92588-0.0982-1.1654-0.10123-1.0487-0.0259-1.8227-0.32095-2.6796-0.90881-0.89364-0.0368-0.63252-0.40075-0.99119-0.96045l-0.58248-0.35025v-0.67444c0-0.49626-0.047-0.73294-0.17786-0.89586-0.36885-0.45922-0.43193-0.65251-0.43193-1.3236 0-0.68325 0.002-0.68965 0.27949-0.71868 0.25873-0.0271 0.28593-0.0705 0.36644-0.58472 0.10155-0.64868 0.10221-0.74035 0.008-1.1108-0.37966-0.46946-0.76311-0.96012-1.1748-1.401-0.26998-0.26175-0.18592-0.49667 0.17773-0.49667 0.18499 0 0.39059 0.11422 0.63838 0.35465 0.20102 0.19506 0.44553 0.38121 0.54335 0.41366 0.16913 0.48881 0.69228 0.33948 0.98804 0.48454 0.17348-0.70869 0.11446-1.4858 0.0636-2.203 0.22537-0.2053 0.95825 0.71355 1.2346 1.5479 0.16733 0.50518 1.3476 0.97975 2.0419 0.82103 0.20267-0.0463 0.23107-0.0984 0.18723-0.34325-0.0284-0.15875-0.11251-0.44485-0.18687-0.63578-0.11899-0.30555-0.17512-0.34714-0.46854-0.34714-0.27009 0-0.35351-0.0483-0.43955-0.2544-0.23098-0.23422-0.26053-0.58924-0.37301-0.84365-0.15879-0.0904-0.176-0.93188-0.0291-1.4248 0.11597-0.39738 0.46623-0.61141 0.69662-0.91353 0.0192-0.15024 0.12575-0.28067 0.28242-0.34569 0.57646-0.6139 1.1654-1.1319 1.7074-1.675 0.39789-0.15535 0.46974-0.21666 0.37534-0.32027-0.15534-0.0503-0.43613-0.13769-0.49526-0.15636 1.0308-0.85859 1.652-1.7666 1.8752-3.0457 0.0343-0.43438 0.007-0.65176-0.0987-0.78171-0.36806-0.2034-0.97934 0.11116-1.4279 0.21942-0.81672 0.36393-1.3638 0.95434-2.1985 1.3512-0.33486 0.25115-0.71638 0.52073-1.0705 0.75082-0.65221 0.66831-1.5072 1.0903-2.2431 1.6464-0.32951 0.14857-0.70819 0.34644-0.8415 0.43971-0.86585 0.29065-1.7256 0.5575-2.6154 0.76679-0.31951 0.0832-0.56565 0.45478-0.70896 0.57 0.0333 0.12174 0.0887 0.33589 0.12313 0.4759 0.17259 0.27089 0.26187 0.56819 0.39482 0.85665 0.0422 0.22757 0.13918 0.57495 0.21549 0.77198 0.0763 0.19701 0.11351 0.39543 0.0826 0.44093-0.0924 0.13621-0.4525 0.0935-0.51777-0.0615-0.60603-0.22042-1.1052-0.66544-1.6043-1.1184-0.16048-0.29568-0.51961-0.41837-0.76775-0.61816 0-0.15175-0.55305-0.61346-1.0163-0.84845-0.19564-0.0992-0.58437-0.21023-0.86386-0.24664-0.27948-0.0364-0.6398-0.0958-0.80069-0.13193-0.1609-0.0362-0.67822-0.0111-1.1496 0.0557-0.82994 0.1176-0.88174 0.11392-1.6384-0.11632-0.42978-0.13076-1.0558-0.29023-1.3912-0.35436-0.58061-0.24381-1.1287-0.39634-1.7315-0.56828-1.3921-0.24732-2.5534-0.7736-3.6731-1.6116-0.2336-0.21809-0.60391-0.47979-0.82293-0.58156-0.21902-0.10178-0.4678-0.28178-0.55285-0.40002-0.19949-0.27732-0.37898-1.0427-0.27905-1.19 0.13899-0.20485 0.40264-0.0169 0.40264 0.28697 0 0.24438 0.0338 0.28265 0.22763 0.25747 0.34499-0.0448 0.35358-0.35498 0.0166-0.59973l-0.28682-0.20832 0.24872-0.0838c0.15649-0.0527 0.31014-0.0489 0.41436 0.0104 0.2364 0.13448 0.48048 0.02 0.55813-0.26181 0.10205-0.37036-0.0638-0.44985-0.63303-0.30342-0.34768 0.0894-0.50385 0.18066-0.52926 0.30913-0.0617 0.31189-0.20595 0.36581-0.31024 0.11595-0.0885-0.21192-0.16308-0.23906-0.75115-0.27317-0.62707-0.0289-1.1561-0.36042-1.7007-0.64393-0.4059-0.29371-0.81835-0.60949-1.1879-0.96672-0.4649-0.2864-0.84296-0.99337-0.84296-1.5763 0-0.33441 0.063-0.46402 0.37693-0.77498 0.32859-0.26738 0.6464-0.51974 0.98267-0.77929 0.3756-0.12138 0.68079-0.4461 0.9779-0.64078 0-0.0722 0.40238-0.27057 0.94816-0.46734 1.0547-0.38022 1.4589-0.72052 1.3453-1.1327 0.27521-0.60235 0.84669-1.0418 1.3075-1.4806 0.56902-0.54427 1.066-1.1892 1.5314-1.8568 0.44371-0.1625 0.71564-0.89925 1.0671-1.3831 0.91041-0.66801 1.3366-1.4578 2.148-2.2425 0.25549-0.41025 0.60775-0.73393 0.90094-1.0947 0.22549-0.49775 0.59381-0.9479 0.9124-1.3849 0.004-0.16171 0.35493-0.40778 0.5822-0.40778 0.2637 0 0.41743-0.16828 0.50088-0.54834 0.33366-0.47709 0.82457-0.94642 1.1758-1.3956 0.13565 0 0.24674-0.11089 0.34927-0.34862 0.56801-0.63662 0.98095-1.4137 1.523-2.0313 0.41544-0.47331 0.81737-0.92597 1.2068-1.4155 0.41256-0.47384 0.67727-0.89109 1.0151-1.3886 0.0815-0.12728 0.21865-0.36681 0.30475-0.53228 0.4335-0.36587 0.56977-0.84723 0.82627-1.3398 0.41089-0.7891 0.57383-1.2586 0.55746-1.804 0.19226-0.35758 0.18633-0.76743 0.24742-1.019-0.14704-0.075-0.49317-1.6618-0.39435-1.8079 0.19555-0.12866 0.27591 0.18721 0.44339 0.30085 0.4873-0.19-0.19586-0.71521-0.2535-0.9257-0.22374 0-0.19111-0.12193 0.0991-0.37029 0.30071-0.25731 0.31512-0.37697 0.0762-0.63278-0.11909-0.12752-0.32898-0.20059-0.63519-0.22117-0.52416-0.0445-0.7223-0.53395-1.0196-0.91412-0.31109-0.34409-0.55165-0.85542-0.76612-1.1637 0.0387-0.14405 0.0973-0.38685 0.13028-0.53957 0.0264-0.602 0.34889-1.0896 0.54676-1.5764 0.38144-0.37824 0.65333-0.9237 0.90547-1.4192 0-0.0721 0.25153-0.47186 0.55896-0.8884 0.35141-0.38926 0.5249-0.87061 0.77324-1.3162 0.0617-0.54051 0.35576-0.85986 0.54683-1.3515 0.20728-0.63577 0.41367-0.9003 0.70244-0.9003 0.77388-1.6455 1.7051-3.2013 2.4984-4.8609 0.53285-0.99532 0.91163-1.3459 1.3102-1.9494 0.39858-0.60353 0.651-0.83846 0.92732-1.5005 0.11089-0.32247 0.35712-0.58087 0.53522-0.87057 0.4001-0.11127 0.66988-0.44123 1.0171-0.64857 0.15358-0.0203 0.23824-0.11662 0.28448-0.32383 0.56372-1.0702 1.6424-1.7888 2.3067-2.7235 0.287-0.27423 0.60842-0.63238 0.90774-0.92433 0.16639-0.96803-0.15533-1.8985-0.43562-2.8138-0.13147-0.18275-0.15378-0.34413-0.0996-0.72003 0.0384-0.26648 0.0854-0.62452 0.1045-0.79567 0.0191-0.17113 0.11753-0.45131 0.21881-0.62262-0.003-0.72914 0.135-1.332 0.24353-1.8873 0.17183-0.58884 0.39204-1.1688 0.63873-1.7755 0.0906-0.0825 0.17336-0.44513 0.21948-0.96161 0.0574-0.64236 0.12061-0.87502 0.28071-1.0327 0.18985-0.33396 0.32921-0.69942 0.48583-1.0684 0.49335-0.73132 1.2728-1.457 1.7934-2.3514 0.26271-0.36139 0.63597-0.58176 0.95541-0.8744 0.41061-0.25392 0.92227-0.55226 1.4905-0.53686 0.56822 0.0154 1.3755 0.32245 2.0153 0.42718 0.25272 0.25695 0.65045 0.79566 0.71918 0.97408 0.52097 0.21831 1.0899 0.48497 1.6041 0.76105 0.675 0.42567 1.2484 0.97222 1.763 1.4713 1.1331 0.66021 1.6609 0.95427 2.6666 1.2552 0.5333 0.11047 0.89637-0.21497 1.3318-0.45585 0.12795 0 0.61315-0.11286 1.0782-0.25081 0.49459-0.18199 1.2408-0.15011 1.5533-0.16204 0.65946-0.18163 0.93175-0.71328 1.2671-1.0308 0.0735-0.23962 0.30445-0.27946 0.45785-0.42026 0.2806-0.0891 0.29915-0.12446 0.27948-0.53289-0.0131-0.47329 0.31277-0.8538 0.53854-1.2437 0.13332-0.47865 0.35365-0.94216 0.5457-1.4046 0.13704-0.46395 0.46776-0.71705 0.73598-1.0437 0.37562-0.60273 0.77178-1.1503 1.0794-1.7822 0.18097-0.17682 0.37571-0.40301 0.43274-0.50263 0.69797-0.55582 1.1048-1.0348 2.0241-1.4651 0.68542-0.27001 1.226-0.75468 1.7786-1.2204 0.72287-0.071 1.5819 0.23395 2.409 0.31788 0.19306 0.1544 0.43507 0.28072 0.53782 0.28072 0.79461 0.32759 1.476 0.81799 1.973 1.2376l0.46887-0.0585c0.00031 0.72095 0.43527 0.71811 0.87934 1.1223 0.16306 0.0687 0.25347 0.26392 0.3913 0.84494 0.15816 0.66676 0.21688 0.77703 0.49935 0.93774 0.49474 0.28147 1.5624 0.0761 2.1402-0.4116 0.25533-0.21554 0.83494-0.44808 1.4067-0.56435 0.3097-0.20223 0.38221-0.61004 0.58438-0.93273 0.49368-0.33087 0.77028-0.61642 1.0984-1.1307 0.25574-0.29035 0.35949-0.37613 0.59669-0.62432-0.40152-0.0797-0.29393-0.2434 0.30469-0.46363 0.47245-0.48532 0.86034-0.13269 1.3032-0.17533 0.15227-0.0532 0.1546-0.19785 0.013-0.80956 0.36954-0.64649 0.99903-0.73446 1.5667-0.98703 0.51653 0 0.91021-0.19133 0.91021-0.44237 0-0.063 0.0693-0.13882 0.15397-0.16843 0.85641-0.69271 1.7113-1.3922 2.5434-2.1238 0.0536-0.11093 0.16607-0.2099 0.24991-0.21992 0.0838-0.01 0.50688-0.0451 0.94008-0.0779 0.78642-0.0596 0.94234-0.15183 0.61967-0.36674-0.24166-0.16096-0.0908-0.3097 0.43673-0.4307 0.25966-0.0596 0.48152-0.17039 0.50946-0.25452 0.68936-0.6985 1.592-1.1362 2.3998-1.678 1.2232-0.57003 2.3344-0.71796 3.3636-1.5833 0.47686-0.1922 1.0102-0.53781 1.3835-0.77635 0.27013 0.0781 0.93726 0.0828 1.1945 0.008 0.42183-0.28066 0.73656-0.7129 1.0681-1.0965 0.097-0.40196 0.49057-0.5057 0.69504-0.71648 0.0698 0.44654 0.66181 0.34189 0.89003 0.45979 0.0423-0.11382 0.21534-0.26597 0.56404-0.49591 0.22308-0.255 0.44784-0.48658 0.67265-0.73085 0.0203-0.31798 0.492-0.17363 0.54888-0.1937 0.0296 0.0701 0.18811 0.12753 0.35235 0.12753 0.23251 0 0.38971-0.0991 0.7101-0.44766l0.41149-0.44768 0.55484 0.0419c0.52168 0.0394 0.55688 0.0288 0.58887-0.17718 0.0221-0.14226 0.11186-0.22919 0.25599-0.24788 0.1515-0.0196 0.24286-0.11548 0.28781-0.30193 0.13621-0.56485 1.1683-1.0011 1.2982-0.54871 0.0292 0.10183 0.12789 0.18514 0.21924 0.18514 0.16294 0 0.71629-0.31427 0.91891-0.52189 0.12712-0.13026 0.92983-0.23442 1.6916-0.2195 0.50784 0.01 0.59682-0.0169 0.78764-0.23789 0.11832-0.13701 0.21512-0.32893 0.21512-0.42649 0.59105-0.5049 1.5136-0.74969 2.2774-1.0326 0.34572-0.17009 0.74979-0.33695 0.89791-0.37082 0.94814-0.56986 1.7639-1.3497 2.5919-2.0519 0.054-0.088 0.43066-0.19639 1.0135-0.29178 0.73285-0.11995 0.93786-0.18772 0.97666-0.32288 0.0279-0.097 0.14037-0.17107 0.25995-0.17107 0.13964 0 0.23219-0.0775 0.27406-0.2294 0.0815-0.29566 0.53463-0.5107 0.82636-0.39212 0.2978 0.12103 1.0328-0.18031 1.1083-0.45441 0.0715-0.25928 1.0367-0.71935 1.2194-0.58122 0.60136 0.03 0.91985-0.86654 1.055-1.1341 0.1352-0.26755 0.0879-0.32209 0.43012-0.55176 0.3422-0.22967 0.78445-0.33586 1.3612-0.43224 0.91187-0.0434 0.93993-0.0517 1.3613-0.40254 0.2366-0.197 0.48743-0.35819 0.55739-0.35819 0.44088 0 1.2699-0.51553 1.2699-0.78968 0-0.0624 0.0686-0.16521 0.15245-0.2286 0.0838-0.0634 0.15245-0.19345 0.15245-0.28904 0-0.10645 0.0718-0.17381 0.18521-0.17381 0.17098 0 0.72946-0.64421 0.72946-0.84144 0-0.0463 0.0879-0.0843 0.19537-0.0843 0.13318 0 0.23276-0.10315 0.31278-0.324 0.12498-0.34493 0.15803-0.36026 0.71328-0.33108 0.51855 0.0273 0.87413-0.12691 1.1379-0.49337 1.5098-1.2281 3.0072-2.0106 4.6532-2.7654 0.25154-0.25196 0.63415-0.56106 0.85026-0.68689 0.52054-0.59456 1.2385-0.82942 1.9108-1.1077 0.5727-0.10882 1.1364-0.34602 1.6866-0.54943 0.44253-0.2285 0.869-0.52089 1.2855-0.81121 0.1733-0.1204 0.54349-0.26454 0.82263-0.32032 0.7188-0.14361 1.5846-0.43643 1.6722-0.56557 0.0409-0.0603 0.28162-0.12496 0.53494-0.14376 0.6966-0.0517 1.2002-0.20356 1.6968-0.51162 0.39305-0.24386 0.50778-0.27151 0.91991-0.22172 0.40409 0.0488 0.51334 0.0245 0.77051-0.17136 0.60692-0.47254 1.2948-0.53836 2.0259-0.65634 0.11723 0.14602 0.48648 0.21771 1.2719 0.2469 0.46389 0.15039 0.46476-0.30118 0.75624-0.49006 0.28981-0.10036 1.454-0.14887 1.5467-0.0644 0.1356 0.1235 0.30892 0.0582 0.41651-0.15682 0.12955-0.25897 0.5367-0.35374 0.93355-0.2173 0.68581-0.0515 1.3916-0.49009 2.0683-0.74969 0.36166-0.21801 0.41944-0.22715 0.7153-0.11316 0.46427 0.17886 1.5603 0.0885 2.0844-0.17183 0.36997-0.28868 0.96568-0.0979 1.0322-0.10464 0 0.55509 0.27696 0.59539 0.80968 0.11782 0.28645-0.20845 0.5263-0.47508 0.78511-0.70869 0.0452-0.0731 0.20788-0.16151 0.36159-0.19654 0.2584-0.0589 0.27949-0.0427 0.27949 0.21447 0 0.20251 0.0977 0.35628 0.35924 0.56546 0.83331 0.44293 1.7994-0.10145 2.776-0.0598 1.0854 0.12893 2.1441 0.14338 3.2263 0.38687 0.75983 0.26659 0.99822-0.17452 1.5846-0.47944 0.68613 0.10362 0.42102-0.11941 1.0608-0.30086 0.54755 0.21186 0.93663 0.23282 1.4356 0.40051 0.84162-0.27229 0.92678 0.16778 1.5353 0.44354 0.29694 0.0893 0.39944 0.0748 0.75322-0.10631 0.59552-0.19917 1.2415-0.11917 1.8912-0.19667 0.23023 0.0628 0.49875 0.19015 0.59668 0.28292 0.26389 0.24998 1.2635 0.32007 1.7223 0.12076l0.35585-0.15456c0.2668 0.46622 0.69564 0.56636 1.1002 0.84828 0.68844 0.37623 0.6708-0.11887 1.1606-0.24991 0.43866 0 0.50476 0.099 0.47372 0.70945 0.002 0.78468 0.34087 0.58293 1.0366 0.75978 1.1358-0.0953 2.167 0.2543 3.2889 0.14627 0.21789 0.0498 0.24395 0.10244 0.22405 0.45247-0.17011 0.45595 0.051 0.71805 0.0663 0.93276 0.16526 0.0378 0.48847-0.0262 0.91148-0.18029 0.46154-0.16819 0.79916-0.23045 1.1414-0.2105l0.57839 0.46415c0.11056 0.52116 0.38181 0.65109 1.1796 0.56503 0.45741-0.0494 0.53227-0.0306 0.75632 0.18961 0.26242 0.25792 0.80381 0.3318 1.1598 0.15828 0.21075-0.10274 0.2964-0.0545 0.59762 0.33693 0.29963 0.44953 0.0214 0.2917 0.0508 0.69249 0.0763 0.0874 0.37071 0.16972 0.73682 0.20601 0.84434 0.0566 1.6003 0.51491 2.2876 0.84149 0.35648 0.67759 1.1013 0.86706 1.7608 1.1088 0.15615 0.42074 0.5472 0.0716 0.71922 0.0941 0.0807-0.29301 0.24338-0.2928 0.59098 0.00078 0.24417 0.20622 0.29587 0.50836 0.087 0.50836-0.0394 0-0.16787 0.0817-0.28554 0.18155-0.52263 0.40193 0.23044 0.56773 0.3353 0.82607-0.16967 0.25006 1.1389 0.49757 1.5559 0.29429 0.32389-0.15789 0.65272-0.0394 0.58592 0.2111-0.0923 0.34631 0.24544 0.59808 0.93888 0.6998 0.80532 0.0834 1.1551 0.70219 1.8152 1.1652 1.091 0.31172 1.9888 0.69687 3.0432 0.92055 0.88246 0.0649 1.7716 0.39492 2.5066 0.61048 0.11346 0.20314 0.18379 0.22573 0.6303 0.20247 0.27644-0.0144 0.73997-0.0922 1.0301-0.17293 0.50503-0.1405 0.54614-0.13843 0.96549 0.0484 0.62457 0.43288 1.2125 0.49087 1.9403 0.56664 0.57911 0.0004 1.0252 0.0514 1.2704 0.14531 1.6179 0.0832 3.2253 0.25312 4.8543 0.26855 0.46667 0.14432 0.52557 0.1409 1.6404-0.0952 0.92729-0.22682 1.85-0.1463 2.769-0.0437 0.14286 0.0696 0.47715 0.0453 1.227-0.0893 0.81837-0.14027 1.6463-0.2041 2.4708-0.29009 0.46337-0.0848 0.84762-0.0743 1.9891 0.0543 1.0458 0.11777 1.4685 0.13309 1.621 0.0588 0.11343-0.0553 0.33502-0.10201 0.49241-0.10381 0.55909-0.11649 1.1086-0.29565 1.6586-0.43324 0.46646-0.13126 0.95361-0.24633 1.4344-0.34834 0.63378-0.23532 1.423-0.33827 2.4922-0.32507 0.62911-0.0788 1.2593-0.33766 1.8489-0.55635 0.22599 0 0.71615-0.0645 1.0893-0.1433 0.37311-0.0788 0.9904-0.1442 1.3717-0.1453 0.54969-0.003 1.0527-0.19326 1.5755-0.3466 1.0402-0.26875 1.9239-0.11966 2.9582-0.51669 0.85013-0.21648 1.7032-0.29015 2.5756-0.52597 0.67227-0.2133 1.3866-0.26752 2.0834-0.36336 0.22359-0.0599 0.72666-0.13921 1.1179-0.17631 0.87593-0.0831 3.3286-0.63678 3.4224-0.77264 0.56274-0.10433 1.1471-0.19555 1.7143-0.29815 0.2769-0.13044 0.51246-0.15133 1.2606-0.11184l1.8135-0.35848c0.49139-0.22388 0.99621-0.40705 1.1218-0.40705 0.28023 0 1.2163-0.29367 1.4151-0.44393 0.30837-0.0988 0.66968-0.10024 1.0078-0.15084 0.40975-0.0813 1.4767-0.18486 2.3711-0.23007 0.88966-0.15263 1.7955-0.11805 2.6644-0.14468 0.70351 0.19444 1.0605 0.17023 2.1416-0.14518 0.89107-0.25999 1.0076-0.2735 1.5214-0.17634 0.60609 0.11461 2.9064-0.0405 3.1467-0.21218 0.0682-0.0487 0.86167-0.1054 1.7633-0.12595 1.0904-0.0249 1.973-0.0993 2.636-0.22238 0.84008-0.14128 1.2357-0.10531 1.9524-0.0279 0.24055 0.19828 2.9913 0.36736 3.4755 0.21361 0.16475-0.0523 0.45421-0.0687 0.64325-0.0364s0.61679 0.006 0.95057-0.0586c0.54752-0.10584 0.64625-0.10017 1.0096 0.058 0.38131 0.45789 0.76467 0.31812 1.2486 0.4901 1.6194-0.068 3.0923 0.68628 4.7363 0.91124 0.32254 0.12309 0.63752 0.16413 1.7866 0.2328 0.16769 0.01 0.51947-0.0143 0.78174-0.054 0.41218-0.0625 0.52933-0.0415 0.86386 0.15427 0.56295 0.32949 1.0672 0.38952 1.3004 0.15478 0.28574-0.2876 0.66737-0.23719 1.0061 0.1329 1.0062 0.3159 1.8245 0.24984 2.81 0.30371 0.75447 0.0111 1.4769 0.315 2.2257 0.4867 0.59179-0.0754 0.9973 0.0986 1.5575 0.37141 0.23246 0.11348 0.57341 0.18514 0.88091 0.18514 0.68582 0.0525 1.2153 0.62634 1.7349 0.97545 0 0.20893 0.40354 0.34492 0.87873 0.29614 0.55238 0.12243 1.0122 0.28793 1.6795 0.38863 0.27718 0.2426 0.54737 0.38443 0.80906 0.42469 0.51297 0.27234 0.92742 0.27065 1.4443 0.38712 0.18168 0.37233 0.62065 0.33784 0.9006 0.49023 0.65113 0.0904 1.3029 0.27873 1.9267 0.46286 0.84561 0.3734 1.6013 0.81963 2.4415 1.1695 0.50076 0.0763 0.82459 0.41044 1.2199 0.72988 0.18504 0.0358 0.40504 0.11746 0.48888 0.18136 0.14537 0.11081 1.2744 0.2634 1.8438 0.2492 0.21463-0.005 0.35723 0.10427 0.7106 0.54628l0.4421 0.55298c0.5325-0.0398 1.0635-0.0956 1.595-0.1463 0.39905-0.0459 0.68088 0.11468 0.70777 0.40335 0.008 0.0855 0.0271 0.29568 0.0424 0.46713 0.0154 0.17146 0.0764 0.35585 0.13555 0.40973 0.0592 0.0539 0.46312 0.12189 0.89768 0.15111 0.85852 0.0194 1.3917 0.51196 2.0802 0.93255 0.31153 0.27065 0.62644 0.46286 0.75835 0.46286 0.12407 0 0.60571 0.10879 1.0703 0.24176 0.65958 0.18877 0.90803 0.31038 1.1336 0.55486 1.2385 0.69748 2.4449 0.92685 3.6239 1.8077 0.27205 0.26919 0.53506 0.50689 1.5422 0.68507 1.2728-0.0509 0.54928 0.50753 1.0014 0.92528 0.12974 0.12579 0.33736 0.22871 0.46138 0.22871 0.89236 0.3857 1.7246 0.91988 2.5584 1.3266 0.15516 0.31016 0.73058 0.69494 1.1528 0.77081 0.51337 0.0923 1.0078 0.29717 1.0078 0.41764 0.65297 0.94775 1.5931 1.3945 2.6644 1.7214l0.58858 0.53196c0.40649 1.3222 1.6764 1.9949 2.5412 3.077 0.24659 0.11456 0.55343 0.20829 0.68188 0.20829 0.50113 0.023 0.73055 0.47081 1.0313 0.69317 0.31039 0.41879 0.59715 0.8903 0.89724 1.2993 0.0335 0.18814 0.20278 0.53539 0.37614 0.77166 0.25064 0.34159 0.41695 0.46031 0.812 0.57967 0.5234 0.0984 0.86302 0.50849 1.2346 0.76936 0.22163 0.48315 0.52148 0.73391 1.3903 1.1627 0.52499 0.58131 1.0527 1.1337 1.5706 1.6985 0.27884 0.2463 0.39081 0.58928 0.59554 0.89799 0.14144 0.17462 0.30613 0.46635 0.36597 0.64828 0.95269 0.65602 1.5424 1.8924 1.9043 2.7494 0.27216 0.11372 0.55216 0.26969 0.62224 0.3466 0.71373 0.075 0.71663 0.48422 1.1139 0.91687 0.15353 0.74007 0.69798 1.0305 1.227 1.4831 1.2097 0.37643 1.3624 1.4455 1.9145 2.4885 0.0857 0.0915 0.32973 0.25537 0.54228 0.36418 0.55336 0.26782 0.78331 0.85152 1.0978 1.3221 0.4398 0.88775 1.3603 1.4242 1.9183 2.4164 0.22852 0.0959 0.44228 0.24723 0.47501 0.33633 0.41174 0.16508 0.62812 0.55106 0.96047 0.85313 0 0.21632 0.41551 0.79 0.5722 0.79 0.23047 0.1187 0.42509 0.335 0.6409 0.50507 0.44649 0.33412 0.54846 0.99695 0.69279 1.504 0.68675 0.38847 1.1288 1.0023 1.6461 1.5817 0.79654 0.68129 0.69969 1.6971 1.1447 2.6349 0.21352 0.38499 0.48189 0.77422 0.70099 1.1614 0.15428 0.40233 0.40253 0.61978 0.60278 0.92812 0.36759 0.4132 0.77195 0.84192 1.1138 1.2404 0.00004 0.11581 0.14343 0.48134 0.31863 0.81228 0.17521 0.33094 0.40657 0.91414 0.51413 1.296 0.10758 0.38185 0.25486 0.90256 0.3273 1.1571 0.0725 0.25457 0.25151 0.67114 0.39791 0.92571 0.3111 0.6827 0.70706 1.336 1.0461 1.987 0.21946 0.23757 0.25593 0.34908 0.20593 0.62973-0.6499 0.58157-0.0873 0.72115-0.0975 1.2386 0.13932 0.9971 0.0846 1.7927-0.17662 2.5151-0.26123 0.72249-0.72897 1.3719-1.4157 2.0766-0.0923 0.37559-0.4711 0.35203-0.71665 0.53552-0.17667 0.19389 0.0289 1.0266 0.36478 1.4773 0.13637 0.18303 0.24794 0.37644 0.24794 0.42979 0.30377 0.46151 0.51245 0.97668 0.72072 1.4876 0.0488 0.60406 0.3055 1.122 0.49884 1.6738 0.38054 0.36384 0.23772 0.88125 0.29977 1.3184-0.15478 0.0871-0.10938 0.41568 0.1499 1.0848 0.14294 0.46865 0.2832 0.86117 0.42622 1.3285 0.44453 1.1722 0.52791 2.2422 1.1136 3.3524 0.21174 0.34478 0.23897 0.4875 0.19882 1.0418-0.0361 0.49828-0.003 0.73557 0.14935 1.0585 0.29461 0.36054 0.45621 0.72457 0.71125 1.106 0 0.16791 0.89099 1.5617 1.0798 1.6892 0.11213 0.59381 0.13767 1.2838 0.2574 1.9324-0.49419 0.48672-0.16603 0.87108-0.21717 1.3382 0.42847 0.53768 0.54921 1.1894 0.76073 1.8057 0.18132 0.8062 0.34988 1.5985 0.4567 2.416 0.12148 0.563 0.16331 1.1263 0.27758 1.6777-0.0526 0.59656 0.14649 1.2954 0.41148 1.4446 0.11378 0.0641 0.29266 0.66992 0.37919 1.2843 0.20439 0.71431 0.65436 1.3501 1.0072 2.0071 0.21019 0.67965 0.0454 1.395 0.099 2.1365 0.21436 0.38631 0.22956 0.5208 0.20924 1.8514-0.16056 1.2968-0.23104 2.2717 0.25758 3.4442 0.19655 0.31373 0.2463 0.92742 0.084 1.0364-0.315 0.21157-0.40244 0.49585-0.28052 0.91216 0.3771 0.78654 0.14863 1.448 0.25624 2.2726 0.0626 0.63589 0.16758 1.2892 0.26627 1.9265 0.27911 0.39804 0.25573 0.89748 0.29315 1.3901 0.0734 0.19686 0.13914 0.67503 0.1461 1.0626 0.14133 0.85531 0.21269 1.719 0.20488 2.5552 0.0614 0.91491 0.03 1.7636 0.19272 2.6486 0.23797 0.37505 0.10468 1.151 0.0955 1.5055 0.19886 0.32077 0.37303 0.74649 0.52129 1.1213 0.19563 0.32419 0.3557 0.6213 0.3557 0.66022 0 0.0389-0.15557 0.12204-0.34572 0.18466-0.51384 0.16925-0.62149 0.32488-0.4641 0.67098 0.43152 0.33503 0.46706 0.79722 0.69472 1.235 0.0485 0.0273 0.11199 0.24237 0.14115 0.47795 0.0291 0.23558 0.14202 0.53855 0.25083 0.67327 0.10881 0.1347 0.22996 0.36265 0.26924 0.50654 0.0583 0.21342 0.0239 0.29566-0.18654 0.44643-0.3755 0.26904-0.29696 1.02 0.12164 1.1632 0.3987 0.13628 0.53877 0.52341 0.31007 0.85697 0.0952 0.52855 0.43766 1.2209 0.63154 1.8213 0.35131 0.35513 0.20591 0.77937 0.30129 1.23 0.0539 0.0918 0.11886 0.34938 0.14432 0.57248 0.12851 1.1264 0.2009 1.5271 0.29559 1.6361-0.15011 0.31208 0.0713 0.58274 0.10764 0.87991 0.29045 0.2477 0.51151 0.82448 0.44233 1.1541-0.0279 0.13316 0.036 0.48954 0.14205 0.79198-0.0398 0.46097 0.33809 0.71433 0.49584 1.0476 0.29126 0.22323 0.58034 0.87338 0.46435 1.0443 0.007 0.24936 0.16623 0.47859 0.24835 0.71502 0.45138 0.39592 0.66785 0.97511 0.91523 1.5219 0.00004 0.0806 0.24385 0.29954 0.5418 0.48645 0.29794 0.18691 0.63177 0.43336 0.74185 0.54766 0.2894 0.30054 0.63322 1.1661 0.63414 1.5964 0.001 0.5615 0.45751 1.4242 0.81299 1.5371 0.33859 0.21701 0.66226 0.4762 0.97985 0.7339 0.0705 0.20245 0.51522 0.64502 0.64809 0.64502 0.14438 0.29419 0.35443 0.57951 0.52433 0.8573 0.15028 0.0855 0.19855 0.21656 0.19855 0.53919 0.0867 0.50278 0.39254 0.93656 0.66848 1.3723 0.19176 0.20759 0.25719 0.37688 0.24422 0.63195-0.0379 0.74503 0.005 0.92823 0.28634 1.2217 0.1564 0.16317 0.5245 0.73118 0.81801 1.2622 0.29351 0.53108 0.56572 0.96692 0.60491 0.96854 0.66375 0.37346 0.58561 1.1358 0.68893 1.8485 0.0345 0.28003 0.0917 0.5508 0.12711 0.60171 0.0354 0.0509 0.0912 0.38451 0.12395 0.74132 0.0503 0.54774 0.11782 0.72589 0.43386 1.1444 0.20586 0.2726 0.3743 0.52336 0.3743 0.55725 0 0.0339-0.0969 0.13718-0.21533 0.22954-0.19283 0.15039-0.20796 0.22753-0.14476 0.738 0.0123 0.35522 0.21827 0.6705 0.31732 0.97478-0.0345 0.0508 0.0121 0.58456 0.10345 1.1861 0.0914 0.60155 0.18028 1.5103 0.19757 2.0194 0.031 0.91342 0.16211 2.3194 0.30386 3.2593 0.0606 0.40193 0.0369 0.53754-0.1428 0.8149-0.11854 0.183-0.24597 0.57006-0.28315 0.86012-0.0372 0.29006-0.12498 0.56904-0.19507 0.61995-0.1552 0.11273-0.21689 1.07-0.1006 1.5607 0.10959 0.46239-0.0381 0.54949-0.6065 0.35761l-0.43168-0.14573-0.69694 0.65444c-0.49981 0.46935-0.85505 0.71336-1.2559 0.86274-0.30743 0.11456-0.71048 0.3481-0.89567 0.51896-0.36025 0.30271-0.76685 0.49222-1.1629 0.7169-0.86441 0.44946-1.6993 1.0547-2.4839 1.6303-0.0575 0-0.26944 0.11937-0.471 0.26527-0.32116 0.19973-0.66785 0.39356-0.98268 0.57909 0 0.15179-1.2185 1.1922-1.3974 1.1932-0.0978 0.00053-0.47512 0.27401-0.83845 0.6077-0.386 0.35452-0.77861 0.62862-0.94451 0.6594-0.54319 0.39668-1.0935 0.77291-1.6984 1.1218-0.24925 0.3931-0.65097 0.77815-0.81525 0.97453-0.50228 0.0901-0.92039 0.1546-1.3453 0.26031-0.26604 0.24157-0.57524 0.42696-0.86144 0.63938-0.0757 0.0972-0.33018 0.18721-0.63783 0.22575-0.54967 0.0689-0.81142 0.23341-0.81142 0.51008 0 0.0952-0.0426 0.19704-0.0946 0.22633-0.33074-0.0216-0.19397-0.54326-0.27872-0.78062-0.11438 0.003-0.43971 0.61265-0.43971 0.82387 0 0.1098-0.0934 0.18681-0.26209 0.21618-0.30722 0.0535-0.41455-0.10758-0.25389-0.38101 0.0602-0.10246 0.10946-0.26496 0.10946-0.36111 0-0.15672-0.0728-0.17246-0.70305-0.15207-0.37986 0.0901-1.0992 0.13097-1.292 0.15771-0.0492-0.17127-0.16753-0.18918-1.6081-0.24332-0.85524-0.0322-1.6799-0.10171-1.8327-0.15461-0.39795-0.13781-3.543-0.0152-4.0666 0.1585-0.22359 0.0742-0.74295 0.14817-1.1542 0.16442-0.4112 0.0162-0.79765 0.0751-0.85878 0.13077-0.0721 0.0656-0.74293 0.10124-1.9077 0.10124-1.4378 0-1.8208-0.0265-1.9178-0.133-0.0667-0.0731-0.38097-0.15859-0.69846-0.18986-1.2121-0.11939-1.3091-0.14455-1.4212-0.36857-0.12868-0.25728-1.1561-0.53569-2.0525-0.55623-0.59757-0.0137-0.74537-0.0514-1.3582-0.34603-0.45895-0.2207-1.7111-0.27997-2.1064-0.0997-0.13474 0.0614-0.7938 0.241-1.4646 0.39899-1.8152 0.42755-2.001 0.48346-2.3825 0.7168-0.48631 0.29748-0.67361 0.24488-0.63362-0.17793 0.51048-0.69425 1.2343-1.1106 1.9085-1.6059 0.32825-0.22805 0.65033-0.69615 0.65033-0.94517 0-0.0719-0.0481-0.21259-0.1069-0.31265-0.10599-0.1804-0.10937-0.18035-0.3968 0.006-0.15945 0.10342-0.43859 0.18803-0.62033 0.18803-0.19582 0-0.46605 0.0942-0.66337 0.23131-0.773 0.19291-1.1708 0.49621-1.8154 0.8362-0.21077 0.10749-0.43226 0.27524-0.4922 0.3728-0.30534 0.49697-0.80691 0.56545-0.70854 0.0967 0.32062-0.85825 0.11436-1.1064 0.78562-1.6826 0.12009-0.26228 0.37552-0.34428 0.57333-0.52564 0.10425-0.18152 0.32451-0.43117 1.0796-1.2237 0.11301-0.11862 0.17476-0.34493 0.17681-0.648l0.003-0.46571c-1.1619-0.0844-1.9047 0.73454-2.6932 1.3435 0 0.18451-0.16337 0.3163-0.39708 0.3203-0.0786 0.001-0.23872 0.14824-0.35571 0.32644-0.28377 0.43225-0.78654 0.92571-0.94317 0.92571-0.12875-0.77132 0.27139-1.6984 0.75241-2.4818 0.11972-0.0158 0.38736-0.22409 0.59473-0.46286 0.63597-0.69786 1.4971-1.5151 2.0054-2.0694 0.69899-0.43637 1.2298-0.63128 1.7376-1.1702 0.25255-0.13572 0.35724-0.26982 0.40977-0.52488 0.12116-0.58829 0.36107-0.6084 0.66428-0.88068 8.5994-7.722 0.5621-0.24055 0.79695-0.42365 0.23486-0.18311 0.5894-0.37376 0.78786-0.42368 0.19848-0.0499 0.38914-0.15787 0.4237-0.23992 0.15861-0.37649 0.70339-0.70465 1.4199-0.8553 0.29068-0.0611 0.58212-0.16995 0.64763-0.24185 0.58405-0.19979 1.1389-0.49762 1.6939-0.7823 0.20788-0.20494 0.51328-0.23608 0.77669-0.35723 0.49637-0.23493 1.0513-0.28907 1.5873-0.38383 0.25154-0.052 0.80034-0.13208 1.2196-0.178 0.41922-0.0459 0.90555-0.13027 1.0807-0.18743 0.17517-0.0572 0.7697-0.11773 1.3212-0.13457 1.0142-0.031 1.3044-0.0545 2.6796-0.2176 0.95887-0.11368 1.0902-0.1644 1.2768-0.49296 0.13493-0.23768 0.20424-0.26649 0.64108-0.26649 0.47445 0 0.82619-0.18313 0.82619-0.43017 0-0.18323 0.65812-0.86582 0.83479-0.86582 0.11146 0 0.18151-0.0688 0.18151-0.17836 0.39236-0.35537 0.4158-0.79918 0.5423-1.3092l0.003-1.6443c-0.37001-0.33703-0.37331-0.33794-0.47459-0.13117-0.21646 0.47455-0.31144-0.0929-0.54341-0.16208-0.32361-0.21582-0.17077-0.63747-0.22319-0.83313-0.10313 0-0.26931-0.0823-0.36929-0.18296-0.1-0.10063-0.21692-0.16318-0.25987-0.139-0.0741 0.0417-0.46385-0.46398-0.62584-0.81204-0.0415-0.0891-0.12899-0.16199-0.1945-0.16199-0.0655 0-0.16989-0.0607-0.23196-0.13483-1.0705-0.73499-2.111-0.65441-3.1378-1.1269-0.23678-0.033-0.55832-0.11877-0.71452-0.19053-0.2317-0.10645-0.34745-0.10959-0.6285-0.017-0.37105 0.12221-0.66278 0.0101-0.66278-0.25464 0-0.15765-0.92547-0.17832-1.2347-0.0276-0.15561 0.0759-0.24588 0.0681-0.37444-0.0322-0.0932-0.0727-0.24602-0.15682-0.33967-0.18696-0.18325-0.059-0.80563 0.0635-1.1751 0.23121-0.17066 0.0775-0.36628 0.0729-0.7833-0.0182-0.36959-0.0808-0.88466-0.10358-1.5371-0.0681-0.90984 0.0494-0.98502 0.0403-1.0325-0.12502-0.25827-0.21851-0.72751-0.28079-1.0846-0.37044-0.31115-0.1519-0.49385-0.17951-0.87327-0.13197-0.83654-0.26735-1.33-0.55114-2.3458-0.43365-0.0796-0.0708-0.36534-0.20467-0.63499-0.29748-0.40477-0.18462-0.73501-0.42115-1.1063-0.6534l-1.7521-0.28167-0.16446-0.40638c-0.1746-0.43142-0.41959-0.60112-1.0146-0.7028-0.28564-0.0488-0.39482-0.0227-0.54725 0.13068-0.84802 0.38766-1.5316-0.12801-2.3043-0.46723-0.29436-0.28702-0.3133-0.34515-0.26147-0.80254 0.0438-0.38638 0.0229-0.50464-0.0967-0.54641-0.22225-0.0777-0.39294 0.12312-0.39294 0.46223 0 0.2633-0.0328 0.29695-0.29772 0.30546-0.44541 0.0143-1.0986-0.13975-1.3015-0.30699-0.0987-0.0813-0.17936-0.23757-0.17936-0.34723s-0.0649-0.28024-0.14425-0.37908c-0.14131-0.17602-0.14964-0.17508-0.40731 0.0454-0.25173 0.21541-0.27724 0.21893-0.59297 0.0818-0.43107-0.0912-0.82321-0.30728-1.2223-0.45651-0.1-0.0959-0.21833-0.17436-0.26297-0.17436-0.0447 0-0.16682-0.22952-0.27151-0.51004-0.29488-0.79019-1.1524-1.2541-1.3671-0.73966-0.0591 0.14169-0.17639 0.23142-0.30237 0.23142-0.27652-0.0903-0.24257-0.54057-0.36347-0.80999-0.0867-0.0891-0.23819-0.26101-0.33659-0.38202-0.70669-0.12966-0.82636-0.67704-1.1691-1.1023-0.52293 0.0606-1.522-0.20065-1.7137-0.21782-0.10445-0.384-0.2841-0.73472-0.44398-1.1044-0.12418-0.24056-0.46115-0.45921-0.57623-0.5738-0.0689 0.0485-0.32279 0.0692-0.5641 0.046-0.47544-0.0456-0.62837-0.23011-0.62837-0.75814-0.0604-0.23255-0.19978-0.40035-0.30489-0.61098 0-0.1393-0.0974-0.31539-0.22867-0.41345-0.14527-1.0288-0.62576-1.2299-1.5006-1.6194-0.13162-0.14444-0.28355-0.67605-0.35669-1.248 0.055-0.4432 0.0476-1.0881 0.0512-1.1714-0.33026-0.88755-0.89873-0.0256-1.1231-0.032-0.23104 0-0.37055-0.25788-0.4394-0.8122 0.0456-0.49243 0.10842-0.67607 0.14129-0.881-0.16927-0.25613-0.34791-0.51613-0.51493-0.76392-0.2526-0.0717-0.36146-0.19451-0.57071-0.644-0.14222-0.30548-0.31046-0.65547-0.37387-0.77775-0.14248-0.27475-0.11431-1.0275 0.0543-1.4523 0.18629-0.46925-0.0276-0.62364-0.92817-0.66999-0.72603-0.0374-0.90126 0.0247-1.0448 0.37032-0.37776 0.26086-0.78359 0.53992-1.1073 0.75443-0.39188 0.0864-0.84442 0.33042-1.2026 0.52607-0.22174 0.00028-0.46311 0.0797-0.63277 0.20828-0.2397 0.18162-0.28159 0.29463-0.33215 0.89607-0.0318 0.37854-0.077 0.70572-0.10047 0.72707-0.3689-0.11726-0.67158-0.24719-1.0177-0.37457-0.56995 0.0321-1.0703 0.4845-1.0703 0.96769-0.34876 0.43243-0.71744 0.67194-1.1104 1.2806-0.23899 0.74667-1.0214 0.64772-1.728 1.2629-0.34984 0.38075-0.69355 0.65218-0.93921 0.7417-0.31995 0.11662-0.40831 0.20806-0.50722 0.52491-0.37752 0.85141-1.2269 0.93842-2.0162 1.3742-0.1201-0.50141-0.65957-0.23604-1.0616-0.29434-0.34504-0.11948-0.63378 0.10552-0.71798 0.55947-0.0385 0.20748-0.12259 0.39389-0.18689 0.41425-0.12056 0.0382-0.62921 0.11419-0.85386 0.12764-0.0699 0.004-0.2671 0.28879-0.43812 0.63246-0.18163 0.60839-0.6114 0.86581-0.96578 1.254-0.12911 0.5354-0.31914 0.70088-0.8401 0.73152-0.45411 0.0267-0.47847 0.0426-0.5672 0.36973-0.082 0.30231-0.12313 0.3368-0.35571 0.29835-0.41664-0.0689-0.54073 0.0769-0.60779 0.71385l-0.0617 0.58619-0.89985 0.0974c-0.99486 0.10773-1.248 0.2624-1.1345 0.6932 0.16955 0.64334 0.17047 1.1109 0.003 1.5699-0.44743 0.51275-0.99259 0.95338-1.5294 1.3924-0.0284 0-0.2264-0.10534-0.44-0.2341-0.43771 0.0659-0.57659-0.35957-0.72521-0.45225 0-0.26611-0.0514-0.35724-0.24759-0.43865-0.39894-0.16556-0.5992-0.0399-0.52336 0.32839 0.0489 0.23729 0.0256 0.32582-0.0969 0.36865 0.0584 0.0601 0.36312 0.47331 0.52363 0.68253-0.023 0.24184-0.0464 0.47096-0.052 0.50914-0.14581 0.0587-0.32239 0.11667-0.47406 0.17156-0.59887-0.2915-1.2745 0.35799-1.4064 0.39731 0.09 0.2137-0.15355 0.87262-0.40837 1.1047-0.15322 0.13957-0.2635 0.38006-0.30813 0.67202-0.0382 0.25006-0.13156 0.53121-0.20739 0.62479-0.44536 0.17188-0.88926-0.39911-1.2571-0.77184-0.21034 0-0.31896 0.16981-0.31896 0.49862 0 0.28616-0.59849 0.85263-0.98186 0.92934-0.37988 0.076-0.66737 0.3404-0.68341 0.62853-0.14082 0.29734-0.47457 0.46685-0.71432 0.70269-0.22408 0.39068-0.68091 0.73089-1.1504 0.85672-0.38022 0.10191-0.43791 0.15402-0.49612 0.44826-0.0926 0.46773-0.26601 0.74331-0.54866 0.87166-0.19947 0.0906-0.2487 0.19315-0.27488 0.57267 0.0644 0.4509-0.35897 0.67909-0.53821 1.0182-0.19201 0.0555-0.20422 0.10787-0.14201 0.60873 0.0514 0.41361 0.0365 0.54799-0.0609 0.54799-0.18378 0.27174-0.44906 0.10651-0.62824 0.14901-0.45003-0.16701-0.61428 0.43446-0.82832 0.77163-0.51356 0.17893-0.94026 0.93267-1.0521 1.8585l-0.0818 0.67742-0.58002 0.007c-0.47371-0.1272-0.74043 0.27544-1.1241 0.41817-0.37181 0.68556-0.85227 1.133-1.3242 1.683-0.60227 0.30516-0.58243 0.71092-0.90117 1.1397-0.24522 0.34472-0.63175 0.54062-0.93647 0.79767-0.17744 0.53969-0.53367 0.96087-0.81797 1.4371-0.25542 0.28258-0.42253 0.56876-0.58071 0.78168-0.59969 0.0589-0.75667 0.54516-1.0501 1.0309-0.12371 0.30966-0.37593 0.50036-0.55859 0.74348-0.43664 0.36947-0.58907 0.98266-0.80886 1.5105-0.73574 0.81864-0.75046 1.645-0.91744 2.0176-0.93495 1.3679-0.65369 1.485 0.50372 1.8312 0 0.26584-0.2191 0.33487-0.78438 0.24711-0.49586-0.077-0.53446-0.1024-0.59394-0.39121-0.0998-0.48481-0.5492-0.51563-0.70309-0.0482 0.11902 0.67327-0.75842 0.46546-0.82958 0.50914-0.2797-0.25477-0.76048-0.17252-1.1153 0.1908-0.28106 0.28776-0.39766 0.33638-0.91726 0.38251-0.3274 0.0291-0.66387 0.10567-0.74771 0.17023-0.0838 0.0646-0.49545 0.16832-0.91468 0.23052s-0.96803 0.152-1.2196 0.19952c-0.9435 0.17825-1.1401 0.1871-1.5923 0.0718-0.64193-0.16371-1.8934-0.1649-2.1089-0.002-0.48366-0.078-0.89729 0.1065-1.338 0.1654-0.16304 0.0111-0.61656 0.0559-1.0078 0.0996-0.39128 0.0436-1.1148 0.0671-1.6078 0.0521-0.99039-0.26576-1.3953-0.29368-2.3104-0.2323-0.58404-0.006-1.4317 0.18187-1.5639 0.34647-0.53239 0.0367-1.1727 0.0372-1.7758 0.10109-0.36811 0.0183-0.92082 0.0562-1.2283 0.0842-0.92943-0.0487-1.6978 0.28552-2.5384 0.54837-0.26471 0.26139-0.68656 0.32643-1.0152 0.49957-0.58975 0.11916-0.63016 0.115-1.1559-0.11928-0.29962-0.13352-0.59737-0.24277-0.66167-0.24277 0.0878 0.20673 0.0269 0.50322 0.0355 0.66485-5.7495-2.0872-0.72229-0.17165-7.2412-0.17411-0.73301-0.59195-1.4419-0.11031-2.2831 0.0647-0.43783 0.21683-1.0039-0.0488-1.4006-0.138-0.0492-0.1179-0.12861-0.23639-0.17646-0.26332-0.0478-0.0269-0.56517-0.0711-1.1496-0.0982-0.90883-0.0421-1.0872-0.0767-1.2322-0.23866-0.21579-0.31816-0.52806-0.63842-0.98135-0.84741-0.21712-0.39379-0.27468-0.43403-0.71141-0.49731-0.61571-0.1322-1.3889 0.004-1.927 0.0596-0.28699-0.0611-0.51439-0.26865-0.76966-0.40197l-0.25443-0.29613c-0.009 0.32022-0.34631 0.43275-0.52216 0.65249 0 0.23986-0.0593 0.28747-0.58438 0.46899-0.9752 0.33715-1.0417 0.34444-1.0417 0.11435 0.20662-0.41583 0.57446-0.77079 0.88788-1.1221 0.19797-0.31497 0.20116-0.34863 0.0439-0.46365-0.47339-0.34625-1.4062-0.63156-2.0649-0.63156h-0.49299c-0.44149 0.47387-0.86383 0.9187-1.5781 1.2034-0.56516 0.27613-0.67751 0.30348-0.76054 0.18514 0.59993-0.80597 0.98568-1.1963 1.1866-2.1761-0.11272-0.63285-0.6595-0.67851-0.9724-1.0004-0.64378 0.94501-0.74389 1.3715-1.429 1.8294-0.0916 0.15003-0.43155 0.43763-0.75541 0.63911-0.47397 0.29487-0.60646 0.34097-0.67919 0.23636-0.13562-0.19513-0.11166-0.36141 0.0521-0.36141 0.79448-0.60857 1.0811-1.5432 1.5149-2.3887-0.98898-0.40519-1.9095 0.10677-2.876 0.85454-0.18093 0.48306-1.0004 0.89657-1.3946 1.2293-0.16587-0.73573 0.28653-1.1903 0.67919-1.7308 0.33085-0.31367 0.60224-0.72375 0.92382-1.073 0.21945-0.1809 0.24013-0.39327 0.0871-0.89503-0.0848-0.27801-0.15444-0.34714-0.3499-0.34714-0.82054 0.33307-1.1668 1.1575-1.6126 1.9046 0.0569 0.21871-0.19764 0.46026-0.378 0.35873-0.20426-0.115-0.0386-1.0345 0.2562-1.422 0.20371-0.44528 0.4199-0.87663 0.60436-1.3253 0.62724-0.81952 0.66424-1.1339 1.7456-1.298 0.98897-2.0432 3.1724-2.0997 4.7273-3.309 0.46379-0.003 0.83377-0.29619 1.2256-0.51231 0.43757-0.0875 0.91723-0.32489 1.2311-0.60918 0.84188-1.0392 1.5966-1.4091 2.6696-1.7843 0.7085-0.41768 1.6584-0.27382 2.539-0.48195 0.13577-0.081 0.53434-0.16988 0.8857-0.19744 0.35134-0.0276 0.69608-0.0914 0.76608-0.14189 1.7291-0.11073 3.4526-0.32631 5.1785-0.50433 0.93869-0.0225 1.821-0.0376 1.9608-0.0336 3.157 0.0906 3.6464 0.0796 3.8102-0.0854 0.0959-0.0965 0.24732-0.14631 0.36197-0.119 0.1084 0.0258 0.57458-0.004 1.0359-0.0653 0.46136-0.0617 1.1849-0.11045 1.6078-0.10823 0.76023 0.004 0.77105 0.00069 0.95447-0.29185 0.10204-0.16274 0.29748-0.40621 0.43433-0.54105 0.20889-0.20583 0.23025-0.2767 0.13319-0.44189-0.0918-0.15625-0.0832-0.22621 0.0416-0.33989 0.0864-0.0787 0.18534-0.24548 0.21981-0.37054 0.20903-0.23158 0.35524-0.57825 0.47791-0.77794 0.16818 0 0.21807-0.16498 0.41947-1.3869 0.10708-0.64964 0.11468-0.89465 0.0292-0.94274-0.14896-0.0839-0.27757-0.01-0.27757 0.15969 0 0.17242-0.29424 0.17383-0.36672 0.002 0.12462-0.33381 0.0416-0.67744 0.0628-1.0214-0.0932-0.40883-0.0853-0.55671 0.0446-0.83999 0.19754-0.43064 0.20726-0.39629-0.12177-0.43077-0.26377-0.0276-0.28007-0.0566-0.28985-0.51529 0.36991-0.58526-0.0854-0.59143-0.14208-0.98333 0-0.27846 0.0417-0.34182 0.25769-0.39118 0.0747-0.082-0.017-0.22126-0.0254-0.33189-0.217-0.0381-0.41265-0.59631-0.25827-0.73693 0.086-0.26218-0.008-0.57398-0.0115-0.85809 0.0348-0.0998 0.0688-0.70475 0.0758-1.3444 0.0113-1.0501-0.007-1.1776-0.18671-1.3138-0.15477-0.11718-0.2084-0.29825-0.24021-0.811-0.0253-0.40757 0.003-0.70819 0.0735-0.78575 0.11027-0.12101 0.22566-1.0568 0.23386-1.8966-0.153-0.62694-0.41988-1.116-0.58835-1.6655-0.27198-0.11288-0.30654-0.37563-0.14786-1.124 0.0486-0.22911 0.0519-0.45822 0.007-0.50914-0.10775-0.1231-0.32633-0.94726-0.34371-1.296-0.008-0.15274-0.0727-0.31977-0.14461-0.37118-0.17913-0.56102-0.041-1.3499 0.0282-1.8634-0.1267-0.17611-0.14918-0.32757-0.0919-0.61927 0.13004-0.66272 0.10507-1.2034-0.0756-1.6358-0.0957-0.22911-0.16907-0.49988-0.16305-0.60171-0.52943-1.1645-0.38798-1.8852-0.61449-2.8522 0.0675-0.11146 0.11043-0.27585 0.0954-0.36529 0.1999-0.17267 0.41816-0.51594 0.4599-0.56744-0.13961-0.1941-0.141-0.27573-0.0122-0.71648 0.0799-0.2736 0.1459-0.63385 0.14656-0.80059 0.00094-0.23765 0.0561-0.32215 0.25529-0.39113 0.13974-0.0484 0.25407-0.12622 0.25407-0.17295 0-0.13753-0.27038-0.19174-0.39413-0.079-0.18938 0.1725-0.37478-0.0667-0.25123-0.32409 0.0734-1.0727 0.3108-1.7073 0.23932-2.8934-0.0994-0.40142-0.0637-0.51108 0.16644-0.51108 0.35339 0 0.0357-0.23524-0.37831-0.28011-0.54906-0.0595-0.70328-0.1407-0.70328-0.37021 0-0.15948 0.18294-0.61269 0.41893-1.0378 0.0491-0.0884 0.0895-0.27587 0.0899-0.41657 0.33825-0.37335 0.002-0.93394 0.003-1.0427-0.11576 0-0.20645-0.061-0.20645-0.13886 0.27505-0.0892 0.5162-0.36319 0.71141-0.50053 0-0.1371-0.054-0.29843-0.1199-0.3585-0.0896-0.0817-0.0912-0.16226-0.006-0.31937 0.0976-0.18065 0.17841-0.54099 0.24421-1.0896 0.009-0.0764 0.0893-0.18796 0.178-0.24796-0.0817-0.33695 0.18606-1.4124 0.30658-2.2342-0.0938-0.37894 0.005-0.5991 0.36648-0.81472 0.13777-0.0822 0.2505-0.19678 0.2505-0.25457-0.00001-0.16354-0.62888-0.58063-0.96653-0.64103-0.16712-0.0299-0.50966-0.0968-0.76119-0.14859-1.0926-0.2619-2.0884 0.27065-2.3412 1.2562-0.19181 0.84155-0.796 1.5216-0.97481 1.0972-0.0316-0.075 0.0199-0.39783 0.11442-0.71743 0.37247-1.2594 0.39849-1.8084 0.0804-1.6972-0.0812 0.0284-0.28111 0.0516-0.44422 0.0516-0.31313 0.21133-0.58591 0.70738-0.85555 1.1108-0.0838 0.0634-0.15244 0.25498-0.15244 0.42577 0 0.39503-0.40601 0.6924-0.67142 0.49177-0.17885-0.49655 0.12924-1.3211 0.21408-1.6246-0.16173-0.26329-0.47211-0.2917-0.72607-0.44862-0.94053-0.33868-0.73295 0.0691-0.74204 1.2983-0.17073 0.34299-0.31043 0.77579-0.31043 0.9618 0 0.29581-0.0439 0.35631-0.35024 0.4828-0.42781 0.17661-0.56578 0.0834-0.56112-0.37912 0.003-0.31376 0.30069-1.2381 0.43909-1.3642 0.14331-0.13054 0.0527-0.30619-0.18602-0.36077-0.39976-0.0914-0.9346 0.42339-1.0187 0.98053-0.0809 0.53604-0.3876 1.0175-0.64811 1.0175-0.27278 0-0.33611-0.2256-0.17622-0.62761 0.21094-0.53032 0.37594-1.4379 0.27768-1.5274-0.64459 0.0453-1.1456 0.61119-1.5875 0.95163-0.28305 0-0.32978-0.16982-0.12778-0.46443 0.15958-0.23275 0.0169-0.46409-0.35603-0.57732-0.32318-0.0981-0.75709 0.12593-0.89809 0.46373-0.11424 0.2737-0.30101 0.23154-0.48319-0.10906-0.10004-0.18702-0.10694-0.28456-0.0254-0.35882 0.0616-0.0561 0.11197-0.147 0.11197-0.20203 0-0.10963-0.55658-0.3551-0.83623-0.3688-0.0966-0.005-0.23741-0.0856-0.31293-0.17966-0.11832-0.14738-0.17135-0.15497-0.38335-0.0548-0.39591 0.18696-0.60173 0.38575-0.60173 0.58117 0 0.15168-0.0494 0.17336-0.2935 0.12889-0.37642 0.18847-0.69251 0.0765-1.0438 0.11539-0.30702-0.26641-0.64863-0.47119-0.9584-0.7114-0.33447-0.0935-0.42765-0.0837-0.70819 0.0742-0.52079 0.29317-0.58604 0.25099-0.50667-0.32762 0.0582-0.42446 0.0421-0.51917-0.0964-0.5676-0.10565-0.0369-0.22162 0.0138-0.31801 0.13919-0.0835 0.10852-0.25638 0.19732-0.38429 0.19732-0.24185 0-0.49078 0.20294-0.60375 0.4922-0.0464 0.11879-0.14794 0.15957-0.34574 0.13885-0.24954-0.0261-0.27659-0.0621-0.24815-0.3302l0.0319-0.30085h-0.81954c-0.61917 0-0.81955 0.0305-0.81955 0.12464 0 0.23469-0.31434 0.69875-0.51202 0.7559-0.301 0.087-0.39499-0.0187-0.33185-0.3731 0.047-0.26377 0.0256-0.3223-0.11805-0.3223-0.69921-0.38487-1.0516-0.067-1.6159 0.122-0.0739 0.26816-0.46327 0.43371-1.0829 0.46042-0.36173 0.0156-0.45505-0.0132-0.48581-0.1496-0.0209-0.0929 0.0341-0.24159 0.12243-0.33045 0.15144-0.15241 0.13037-0.15764-0.3722-0.0924-0.293 0.038-0.77711 0.0722-1.0758 0.0759-0.44524 0.006-0.55221 0.0386-0.59378 0.18334-0.10435 0.36348-0.74331 0.29295-0.74331-0.082 0-0.14074-0.1658-0.169-1.3466-0.22954-1.8777-0.0963-2.0156-0.095-2.0932 0.0194-0.11613 0.17116-0.76478-0.002-0.87818-0.23424-0.1292-0.26475-0.52248-0.27473-0.61279-0.0156-0.0526 0.15097-0.0955 0.16786-0.20891 0.0821-0.11154-0.0843-0.15642-0.0753-0.20559 0.0414-0.0881 0.20919-0.2444 0.18626-0.2444-0.0359 0-0.25019-0.16516-0.2353-0.23889 0.0215-0.0361 0.12586-0.0931 0.17111-0.14561 0.11571-0.0828-0.0874-0.35021-0.65554-0.46755-0.99354-0.0309-0.0891-0.12199-0.162-0.20235-0.162-0.10041 0-0.16598 0.15195-0.20968 0.486-0.035 0.26729-0.11317 0.74689-0.17375 1.0658-0.10498 0.55262-0.0965 0.60467 0.1811 1.1108 0.16018 0.29209 0.32714 0.55526 0.37101 0.58482 0.0904 0.75747 0.33569 1.4416 0.63055 2.1437 0.092 0.29215 0.2442 0.57093 0.33825 0.61951 0.15764 0.0814 0.15589 0.0985-0.0224 0.21848 0.0264 0.30313 0.0522 0.51147 0.0918 0.89882-0.0839 0.0634-0.15245 0.17512-0.15245 0.24832 0 0.19818 0.63731 1.0477 0.78601 1.0477 0.0708 0 0.12866 0.0776 0.12866 0.17241 0.7531 0.80346 1.0178 1.5166 1.3076 2.4853-0.0236 0.67381 0.10769 1.0135 0.56606 1.464 0.25942 0.32138 0.39905 0.71841 0.58457 1.0848 0.10838 0.13967 0.17493 0.28654 0.1479 0.32639-0.0903 0.13311 0.35202 1.1744 0.63885 1.5039 0.45767 0.52571 0.60761 1.141 0.34299 1.4073-0.17467 0.17581-0.12432 0.83097 0.0684 0.88947 0.35545 0.79503 0.94085 1.4858 1.4433 2.1748 0.27221 0.15178 0.92245 1.0609 0.84278 1.1784-0.0359 0.0529 0.007 0.19709 0.0959 0.32035 0.12939 0.31475 0.24252 0.63167 0.36484 0.95027 0.25767 0.38493 0.25754 0.63624-0.00037 0.78296-0.23173 0.13181-0.2775 0.53393-0.0608 0.53393 0.15205 0 0.36597 0.45552 0.36515 0.77752-0.001 0.48308 0.37012 1.1165 0.98799 1.6852 0.6566 0.60433 0.70196 0.69222 0.77026 1.4924 0.27841 0.56902 0.34091 1.1825 0.48282 1.7276-0.24361 0.97433-0.24488 0.9425 0.0459 1.1509 0.18791 0.13462 0.28978 0.31177 0.3278 0.56995 0.0472 0.32068 0.0166 0.40713-0.21245 0.60052-0.20837 0.1759-0.26796 0.314-0.26916 0.62376-0.002 0.52518-0.24092 1.1381-0.44412 1.1394-0.0875 0.00056-0.23679 0.0718-0.3317 0.15822-0.15227 0.13869-0.15695 0.20033-0.0399 0.52353-0.0322 0.56318 0.25764 0.94545 0.41069 1.4407 0 0.17985-0.0642 0.24605-0.27949 0.288-0.15371 0.0299-0.43955 0.1065-0.63519 0.1701-0.33593 0.10923-0.35357 0.13589-0.31731 0.47959-0.0152 0.87292-0.46387 1.1082-0.94451 1.7677 0.015 0.34806 0.0805 0.83236 0.14551 1.0762 0.1319 0.4948 0.0112 0.7593-0.3049 0.66794-0.23106-0.0668-0.71303 0.28886-0.71303 0.52618-0.42199 0.29404-0.64294 0.77454-0.91587 1.1859-0.0474 0-0.0473 0.12356 0.00021 0.27457 0.0814 0.25855 0.13588 0.74017 0.11291 0.99828-0.28637 0.10834-0.58894 0.29425-0.8826 0.44097-0.34824 0.29916-0.36888 0.34474-0.25716 0.56807 0.075 0.14988 0.0954 0.40082 0.0535 0.65568-0.0565 0.34305-0.11596 0.42811-0.35171 0.50296-0.34892 0.1108-0.42101 0.2498-0.49555 0.95539-0.0578 0.54706-0.0632 0.555-0.41425 0.61276-0.58549 0.0963-1.1179 0.34697-1.1179 0.52621 0 0.0898-0.0772 0.26375-0.17165 0.38653-0.16202 0.21069-0.18908 0.82747-0.0976 2.2248-0.69292 0.63732-0.83301 1.4609-1.0004 2.3175 0.0972 0.3339-0.37431 0.36997-0.59313 0.58625-0.23819 0.0544-0.47391 0.39522-0.47576 0.68776-0.00054 0.0867-0.11361 0.37797-0.25125 0.64728-0.19211 0.37587-0.33357 0.52136-0.6088 0.6261-0.30647 0.30044-0.67357 0.28716-1.0542 0.4498-0.36392 0.17631-1.784 0.60987-1.9976 0.60987-0.20328 0.19193-0.45592 0.31513-0.69606 0.48112-0.31126 1.1317-0.69115 0.40162-1.0634 0.65982-0.39974 0.13752-0.86205-0.13525-1.2622-0.28098-0.27259-0.37348-0.29383 0.21113-0.38136 0.27403-0.0915 0.1902-0.44576 0.0634-0.72038 0.1025-0.972-0.24394-0.77444 0.494-1.226 0.72243 0.0426 0.27774-0.19747 0.28617-0.49821 0.0175-0.16242-0.1451-0.29657-0.34183-0.29813-0.43716-0.002-0.14407-0.0288-0.15374-0.15636-0.0573-0.0859 0.0649-0.41051 0.11385-0.73683 0.11101-0.40671-0.004-0.63989 0.0415-0.7703 0.14861-0.17446 0.14332-0.19571 0.14285-0.3161-0.007-0.10773-0.13419-0.29801-0.16077-1.1511-0.16077-0.47061-0.0124-0.94712 0.0824-1.3292 0.11571-0.31635-0.17013-1.4282-0.15301-1.5024 0.0231-0.0965 0.22893-0.51466 0.15814-1.0274-0.17393-0.55327-0.35832-0.883-0.47158-1.0664-0.36633-0.17923 0.10282-1.3187 0.0344-1.4841-0.0892-0.10451-0.078-0.17988-0.0498-0.32061 0.12014-0.17961 0.21688-0.21681 0.2218-1.5657 0.20671-0.75994-0.009-1.3817 0.015-1.3817 0.0523-0.61647 0.34959-1.3659 0.50242-2.0566 0.67359-0.65719-0.004-1.1918 0.0564-1.8533 0.14563-0.87624 0.42798-1.0369 0.45761-2.0332 0.0838-0.78591 0.10763-1.4949-0.0408-2.2856-0.14357-0.59572-0.27857-1.5224 0.045-1.8018 0.0893-1.5482-0.72392-3.0091-0.17639-4.3387 0.28824-0.23016 0.3549-0.55086 0.51725-0.63364 0.32077-0.39636-0.47379-0.38534 0.34314-0.54129 0.482-0.0735 0.34367-0.15089 0.65272-0.17199 0.68678-0.0391 0.0632-0.64635-0.17885-0.64635-0.25759 0-0.0238 0.0867-0.15613 0.19276-0.29408 0.10601-0.13795 0.21921-0.38621 0.25153-0.55168 0.055-0.28162 0.0403-0.30085-0.23113-0.30085-0.80008 0.29736-1.617 0.56422-2.4628 0.77485-0.3522 0.0743-0.55513-0.12818-0.39746-0.39653 0.88214-0.552 1.9302-1.0169 2.9061-1.5832 0.34944-0.10504 0.55176-0.42525 0.40519-0.64127-0.0958-0.14112-0.49116-0.12023-0.72097 0.0381-1.3782 0.16387-2.0943 0.20277-3.3879 1.2225-0.43463 0.0469-0.51891 0.0318-0.51891-0.093 0-0.0819 0.13106-0.23724 0.29125-0.34511 0.44094-0.56274 0.92618-0.98379 1.4827-1.4294 0.83451-0.55281 1.3881-1.3574 2.088-2.0774 0-0.20839-0.15973-0.32966-0.25305-0.19211-0.0351 0.0518-0.14692 0.0941-0.24846 0.0941-0.79624 0.11337-1.3792 0.42723-2.0314 0.85877-0.16772 0.0577-0.38863 0.25057-0.50743 0.44311-0.23848 0.38648-0.75893 0.56281-0.96268 0.32615 0.31819-0.60021 0.68069-1.1044 1.0748-1.6743 0.66245-0.81697 1.222-1.717 1.8405-2.5417 1.1717-0.96449 1.9333-2.1486 2.9703-3.1614 0.0496-0.20589 0.14888-0.28768 0.44805-0.36933 0.30568-0.0834 0.42856-0.18788 0.60078-0.51076 0.16843-0.31579 0.27191-0.40589 0.46612-0.40589 0.52735-0.21245 0.99697-0.64033 1.4807-0.97466 0.25153-0.17874 0.69744-0.43137 0.9909-0.56137 0.45979-0.38506 0.91397-0.59947 1.4586-0.86539 0.21213-0.10746 1.3426-0.34955 1.9-0.4069 0.27191-0.028 0.63639-0.16861 0.96549-0.37253 0.3387-0.21797 0.7406-0.35801 1.0876-0.52577 0-0.12516 0.63283-0.27746 1.3212-0.31797 1.0011-0.11843 2.0328-0.0814 2.7565-0.0546 0.72355 0.0418 1.3429-0.10314 2.1021-0.13278h1.29c0.7453-1.178 0.84871-2.2889 0.50244-3.564-0.0904 0-0.24731-0.18358-0.36614-0.42827-0.21839-0.44969-1.0577-1.6764-1.417-2.0711-0.24673-0.41008-0.71362-0.46187-1.1104-0.63631-0.8242-0.42087-1.5175-0.9669-2.2077-1.591-0.55848-0.29569 0.0714-0.39807 0.0762-0.42486 0.77891 0.0776-0.50872-0.45407-0.73069-0.55388-0.97583-1.1519-2.0756-1.8312-2.8772-3.0392-0.10451-0.65732-0.71486-0.92254-1.2014-1.2868-0.27178-0.0621-0.78094-0.46159-0.9569-0.75074-0.76916-0.42763-1.4507-0.98065-2.1184-1.4925-0.29273-0.34995-0.78523-0.31604-1.1666-0.4164-0.28752-0.12671-0.54564-0.35264-0.78668-0.50842-0.0168-0.0973-0.12213-0.4089-0.23414-0.69239-0.25213-0.71918-0.8414-0.72806-1.4476-0.95829-0.19904 0.0696-0.47282-0.20828-0.47282-0.47983-0.074-0.4036-0.22156-0.79653-0.34798-1.1882-0.0728-0.35398-0.65763-0.97761-0.91686-0.97765l-0.71881-1.1571h-0.69928c-0.93363-0.14391-1.1494-0.58524-1.5886-1.3423-0.0931-0.12729-0.27648-0.38299-0.40756-0.56821-0.57587-0.38624-1.1834-0.67762-1.7797-1.192-0.25881-0.066-0.48386-0.16559-0.50013-0.22132-0.17927-0.61406-0.32384-0.90789-0.52522-1.0674-0.13186-0.10443-0.23974-0.22857-0.23974-0.27587 0-0.16867-0.69764-0.30799-1.0238-0.20444-0.95542 0.21654-0.67307-0.37657-1.0661-0.77131-0.12909-0.49128-0.16343-1.4506-0.17895-1.7341-0.2483-0.0542-0.49532-0.0991-0.74598-0.14924-0.28596 0.0277-0.28814 0.0239-0.28162-0.48125 0.004-0.28003 0.0265-0.65494 0.0508-0.83314-0.11643-0.45354-0.75574-0.63671-1.173-0.96682-0.45148-0.0617-0.64878-0.17643-0.47322-0.27526 0.0506-0.0285 0.007-0.28979-0.0964-0.58497-0.27879-1.2732-1.3288-1.6444-2.3546-2.2277-0.056 0.1347-0.22219 0.2469-0.33273 0.36974-0.72193 0.75087-1.3835 1.4925-2.2329 2.071-0.4492 0.0768-0.66111 0.43129-0.66111 1.1061v0.42373c-0.38227-0.34342-0.65767 0.19377-0.80497 0.23717-0.0976 0.55167-0.3603 1.0368-0.60431 1.5406-0.0773 0.31452-0.18376 0.52811-0.2633 0.52811-0.0735 0-0.26031 0.0599-0.41525 0.13313-0.3331 0.15741-0.54445 0.61092-0.6512 1.3973-0.10914 0.80402-0.21326 0.94218-0.68496 0.90891-0.54011-0.0381-0.64851 0.0554-0.709 0.6114-0.29547 1.2744-1.3385 2.2666-2.1503 3.0903 0.0155 0.31096 0.20989 0.56442 0.3171 0.85272 0.0193 0.23936-0.0168 0.26596-0.48733 0.35872-0.35101 0.1731-0.81302 0.47344-1.1645 0.7809-0.37659 0.23038-0.43694 0.31416-0.46396 0.64405-0.0416 0.50809-0.0743 0.5409-0.61245 0.6144-0.54601-0.096-0.35455 0.41139-0.58379 0.67737-0.16603 0.16711-0.21391 0.17182-0.57999 0.0569-0.74142-0.23267-0.87203 0.0222-0.51263 1.0004 0.10653 0.28991 0.22493 0.71689 0.26312 0.94885 0.0793 0.48193 0.0103 0.5146-0.59832 0.28298-0.34385-0.13087-0.37084-0.12813-0.47444 0.0482-0.0884 0.19208-0.0384 0.39144-0.0588 0.60007-0.0609 0.221-0.10399 0.23806-0.53667 0.21254-0.86908-0.093-0.90396 0.25937-1.6014 0.83421-0.0705 0.0359-0.31094 0.32296-0.5344 0.63788-0.45271 0.63799-0.73192 0.75037-1.5963 0.64245-0.46536-0.29639-0.30208 0.83619-0.30348 1.2305-0.10183 0.38516-0.19042 0.70999-0.19688 0.72183-0.006 0.0118-0.14931-0.0258-0.31743-0.0836-1.011 0.008-1.4966 0.69686-2.1571 1.366 0.0106 0.34776-0.319 1.4506-0.4625 1.5478-0.50968 0.0492-1.0424 0.0453-1.5547 0.0479-0.061 0.0344-0.14074 0.27086-0.17723 0.52543-0.10992 0.7671-0.14988 0.86951-0.38383 0.98354-0.61593-0.0906-0.72787 0.37435-1.1019 0.59265-0.20829 0.42672-0.28792 0.50492-0.515 0.50571-0.28323 0.001-0.39199 0.14461-0.39199 0.51765-0.0376 0.21893-0.25394 0.28016-0.40128 0.44271-0.0821 0.19658-0.17476 0.22549-0.91095 0.28398-0.45317 0.036-0.85422 0.11493-0.89703 0.17651-0.45774 0.0533-0.45693 0.53288-0.63639 0.74218 0 0.473-0.0184 0.49036-0.9909 0.93424-0.40525 0.18497-0.73682 0.39074-0.73682 0.45725-0.0791 0.2658-0.31302 0.44974-0.46889 0.6737-0.0936 0.1405-0.22816 0.16656-0.77905 0.15092-0.72815-0.0207-0.90724 0.072-0.86209 0.44628-0.38311 1.0414-0.8833 0.98079-1.5716 1.3097-0.33767-0.043-0.38966-0.0219-0.48023 0.19505-0.0559 0.13382-0.1713 0.24331-0.25653 0.24331-0.18623 0.2192-0.17983 0.71301-0.23403 1.0348-0.0677 0.0617-0.35013 0.11684-0.62758 0.12257-0.56783-0.0742-0.78409 0.36646-1.126 0.60151-0.33498 0-0.8369 0.23414-1.1913 0.55568-0.27601 0.25047-0.328 0.36362-0.31466 0.68481 0.1012 0.56221-0.37055 0.76103-0.62506 1.1233 0 0.20109-0.47237 0.16819-0.71142-0.0495-0.26336-0.23989-0.50815-0.23767-0.50815 0.005-0.10824 0.47345-0.22019 0.97596-0.45139 1.2914-0.1368 0.73314-0.56952 0.98129-0.98027 1.4746-0.45915 0.41633-0.73306 0.56196-1.0569 0.56196-0.69475 0.22748-1.1838 0.80906-1.6609 1.2786-0.48969 0.52914-0.99749 1.1637-1.4402 1.6782 0 0.24746-0.0885 0.27743-0.57805 0.19589-0.56556-0.0942-0.67536-0.0127-0.66693 0.49531 0.006 0.35893-0.0232 0.42511-0.18703 0.42511-0.24991-0.16472-0.54254-0.11933-0.84174-0.18514h-0.64766l-0.0499 0.43971c-0.0646 0.56893-0.64393 1.4238-0.94143 1.3891-0.0964-0.38635-0.34954-0.71894-0.46806-1.0991-0.36076 0.60632-0.72024 1.3319-1.0056 1.8748-0.54597 0.29648-0.42014 0.81255-0.50062 1.3591-0.007 0.37993-0.0213 0.39814-0.28702 0.37029-0.31315-0.10265-0.40327-0.73856-0.49622-0.98316-0.23707-0.0308-0.72977 0.4428-0.99972 0.96098-0.14887 0.28575-0.16086 0.28987-0.56036 0.19275-0.34086-0.13657-0.53441-0.32064-0.80208-0.48124-0.37698 0.46143-0.50586 1.2721-0.72409 1.8826 0 0.24226-0.29056 0.33699-0.50116 0.16338-0.30421-0.25076-0.8778-0.42526-1.008-0.30666-0.1013 0.17806-0.24494 0.31534-0.371 0.47763-0.27315 0.2488-0.3178 0.53796-0.14645 0.94849 0.0894 0.21408 0.0764 0.27869-0.0762 0.38071-0.16081 0.10748-0.21185 0.091-0.40726-0.13162-0.67754-0.80594-0.30518-0.94408-1.2111-0.24032 0.0291 0.0891 0.0846 0.28299 0.12344 0.43086 0.0675 0.25728 0.0579 0.26654-0.22384 0.21478-0.16195-0.0298-0.3675-0.0799-0.45679-0.11136-0.21246-0.0749-1.0268 0.53842-1.1479 0.86456-0.0499 0.13436-0.17748 0.35719-0.28352 0.49517-0.16551 0.21537-0.22912 0.2383-0.44946 0.162-0.53808-0.18634-0.7664-0.0562-0.84524 0.48182l-0.0588 0.40129h-1.2196c-1.1873 0-1.2296 0.007-1.602 0.2665-0.38121 0.26562-0.46184 0.41036-0.52196 0.93692-0.33745 0.32083-1.1618 0.7115-1.4871 0.89594-0.003 0.33592-0.19668 0.5075-0.80986 0.71926-0.43232 0.55553-0.9561 0.6119-1.4363 0.9305-0.38569 0.0355-0.91303 0.56464-1.0712 0.70541-0.81472-0.49508-1.9696-0.47469-2.6453-0.49196l-3.8415-0.0746c-0.54413-0.10052-1.0869 0.0765-1.5905 0.14148-1.2407 0.29735-2.4146 0.14167-3.6893 0.46023-0.89362-0.7829-1.5831-0.62138-2.6873-0.39343-0.3119 0.55106-0.58972 0.77432-0.88075 0.70779-0.68986 0.21506-1.2574 0.0839-1.7636 0.15497-0.57862-0.43925-0.86328 0.0979-1.3302 0.50732-0.37284 0.29703-1.0443 0.35155-1.5363 0.4196-0.33805 0.21925-1.0058 0.30659-1.411 0.18451z\",\"inkscape:connector-curvature\":\"0\"}})]),_c('g',{attrs:{\"id\":\"g3701\",\"transform\":\"translate(34,30)\"}},[_c('path',{staticStyle:{\"fill\":\"#584528\"},attrs:{\"id\":\"path3075-0\",\"d\":\"m321 500v41h18v9h-27v-50z\",\"inkscape:connector-curvature\":\"0\"}}),_c('path',{staticStyle:{\"fill\":\"#584528\"},attrs:{\"id\":\"path3077-1\",\"d\":\"m351 500v50h-9v-50z\",\"inkscape:connector-curvature\":\"0\"}}),_c('path',{staticStyle:{\"fill\":\"#584528\"},attrs:{\"id\":\"path3079-6\",\"d\":\"m366 509v11h18v9h-18v21h-9v-50h27v9z\",\"inkscape:connector-curvature\":\"0\"}}),_c('path',{staticStyle:{\"fill\":\"#584528\"},attrs:{\"id\":\"path3087-9-8-2\",\"d\":\"m462 500v50h9v-28.562l12 28.562h9v-50h-9v28.562l-12-28.56h-9z\",\"inkscape:connector-curvature\":\"0\"}}),_c('path',{staticStyle:{\"fill\":\"#584528\"},attrs:{\"id\":\"path3087-9\",\"d\":\"m507 500v50h-9v-50z\",\"inkscape:connector-curvature\":\"0\"}}),_c('path',{staticStyle:{\"color\":\"#000000\",\"fill\":\"#584528\"},attrs:{\"id\":\"rect3278-9\",\"d\":\"m252 500c-6.6274 0-12 5.3726-12 12v26c0 6.6274 5.3726 12 12 12h6c6.6274 0 12-5.3726 12-12v-3h-9v3c0 1.6568-1.3432 3-3 3h-6c-1.6568 0-3-1.3432-3-3v-26c0-1.6568 1.3432-3 3-3h6c1.6568 0 3 1.3432 3 3v3h9v-3c0-6.6274-5.3726-12-12-12h-6z\",\"inkscape:connector-curvature\":\"0\"}}),_c('path',{staticStyle:{\"fill\":\"#584528\"},attrs:{\"id\":\"path3073-2-7-7\",\"d\":\"m286 500-13 50h9l2.3438-9h13.312l2.3438 9h9l-13-50zm5 15.375 4.3125 16.625h-8.625z\",\"inkscape:connector-curvature\":\"0\"}}),_c('path',{staticStyle:{\"color\":\"#000000\",\"fill\":\"#584528\"},attrs:{\"id\":\"rect3278-9-9\",\"d\":\"m402 500c-6.6274 0-12 5.3726-12 12v26c0 6.6274 5.3726 12 12 12h6c6.6274 0 12-5.3726 12-12v-26c0-6.6274-5.3726-12-12-12h-6zm0 9h6c1.6568 0 3 1.3432 3 3v26c0 1.6568-1.3432 3-3 3h-6c-1.6568 0-3-1.3432-3-3v-26c0-1.6568 1.3432-3 3-3z\",\"inkscape:connector-curvature\":\"0\"}}),_c('path',{staticStyle:{\"color\":\"#000000\",\"fill\":\"#584528\"},attrs:{\"id\":\"rect3278-9-94\",\"d\":\"m426 500v50h9v-21h9c1.6568 0 3 1.3432 3 3v18h9v-18c0-2.8426-1.0044-5.444-2.6562-7.5 1.66-2.06 2.66-4.66 2.66-7.5v-5c0-6.6274-5.3726-12-12-12zm9 9h9c1.6568 0 3 1.3432 3 3v5c0 1.6568-1.3432 3-3 3h-9z\",\"inkscape:connector-curvature\":\"0\"}}),_c('path',{staticStyle:{\"fill\":\"#584528\"},attrs:{\"id\":\"path3073-2-7-7-0\",\"d\":\"m523 500-13 50h9l2.3438-9h13.312l2.3438 9h9l-13-50zm5 15.375 4.3125 16.625h-8.625z\",\"inkscape:connector-curvature\":\"0\"}})])],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import { render, staticRenderFns } from \"./ca_logo.vue?vue&type=template&id=378f7ede&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import Vue from 'vue';\r\nimport Vuetify from 'vuetify/lib/framework';\r\nimport ca_logo from \"@/assets/ca_logo\";\r\n\r\n\r\nVue.use(Vuetify);\r\n\r\nexport default new Vuetify({\r\n  theme: {\r\n    themes: {\r\n      light: {\r\n        primary: '#FF8A65',\r\n        secondary: '#FF8A65',\r\n        success: '#F9C413',\r\n        accent: '#000033',\r\n        error: '#FF0F50',\r\n        info: '#37C948',\r\n        warning: '#FF5722',\r\n      },\r\n    },\r\n  },\r\n  icons: {\r\n    values: {\r\n      ca_logo: { // name of our custom icon\r\n        component: ca_logo, // our custom component\r\n      },\r\n    },\r\n  },\r\n});\r\n","import * as d3 from 'd3'\r\n// load different type of files\r\n// basically, aviod mutiple level objects\r\n// update df \r\n// can return data is update = false\r\n\r\nexport default class filer_loader {\r\n    constructor(df = [], fetch = \"\") {\r\n        this.df = df\r\n        if (fetch !== \"\") {\r\n            let file = fetch.split(\".\").pop()\r\n            if (file == \"csv\") this.fetch_csv(fetch)\r\n            if (file == \"json\") this.fetch_json(fetch)\r\n        }\r\n    }\r\n\r\n    // 1. local json file can directly use import\r\n    // e.g: import json from '@/assets/json/data.json'\r\n\r\n    // 2. online data\r\n    async fetch_json(file, update = true) {\r\n        const response = await d3.json(file)\r\n        if (update) this.df = response\r\n        else return response\r\n    }\r\n    async fetch_csv(file, update = true) {\r\n        const response = await d3.csv(file)\r\n        if (update) this.df = response\r\n        else return response\r\n    }\r\n\r\n    // 3. uploaded file\r\n    async load_json(file, update = true) {\r\n        let response = await this.readFileAsync(file);\r\n        if (update) this.df = JSON.parse(response)\r\n        else return JSON.parse(response)\r\n    }\r\n    async load_csv(file, update = true) {\r\n        let response = await this.readFileAsync(file);\r\n        let content = await this.convert_csv(response);\r\n        if (update) this.df = content\r\n        else return content\r\n    }\r\n\r\n    // read a local file\r\n    async readFileAsync(file) {\r\n        return new Promise((resolve, reject) => {\r\n            let reader = new FileReader();\r\n            reader.onload = () => {\r\n                resolve(reader.result);\r\n            };\r\n            reader.onerror = reject;\r\n            reader.readAsText(file);\r\n        })\r\n    }\r\n\r\n    // convert csv text to object\r\n    async convert_csv(data) {\r\n        let lines = data.split(\"\\n\")\r\n        let output = []\r\n        let header = lines[0].trim().split(\",\").filter((x) => { return x.length > 0 })\r\n        header = header.map(x => x.toLowerCase().trim())\r\n        for (let l = 1; l < lines.length; l++) {\r\n            let content = lines[l].split(\",\").filter((x) => { return x.length > 0 })\r\n            if (content.length == header.length) {\r\n                let line = {}\r\n                for (const h in header) {\r\n                    line[header[h]] = content[h].trim()\r\n                }\r\n                output.push(line)\r\n            }\r\n        }\r\n        return output\r\n    }\r\n\r\n}\r\n","import file_loader from \"./file_loader\"\r\n// import { mean } from 'mathjs'\r\n\r\n// perform data selection, grouping, averaging, mostly like pandas\r\n// will effect on the df, not df_filter\r\nexport default class data_clean extends file_loader {\r\n    constructor(df=[],fetch=\"\") {\r\n        super(df,fetch)\r\n    }\r\n\r\n    // contact df\r\n    concat(new_data){\r\n        this.df = this.df.concat(new_data)\r\n    }\r\n\r\n    // merge new data based on cols\r\n    // TODO test\r\n    async merge(new_data, cols) {\r\n        new_data.forEach(element => {\r\n            let row_index = []\r\n            let temp = this.df.filter((row, index) => {\r\n                var isEqual = true\r\n                cols.forEach(c => {\r\n                    isEqual = isEqual && (row[c] == new_data[c])\r\n                });\r\n                if (isEqual) row_index.push(index)\r\n                return isEqual\r\n            })\r\n            if (temp.length == 0) {\r\n                // if this is a new row\r\n                this.df.push(element)\r\n            } else {\r\n                // if row exists, update row with new non-null values\r\n                temp.forEach(row_index => {\r\n                    for (const [key, value] of Object.entries(element)) {\r\n                        if (value != null) this.df[row_index][key] = value\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    // TODO finish remove_duplicate\r\n    // after file loaded, run this function to make sure no duplicated rows\r\n    // handle duplicated rows based on cols\r\n    // keep_last, keep_first, mean\r\n\r\n    // remove_duplicate(cols, methods = \"keep_last\") {\r\n    //     var key_index=[]\r\n    //     this.df.forEach(element => {\r\n    //         var curr_key=\"\"\r\n    //         cols.forEach(c => {\r\n    //             curr_key += element[c]\r\n    //         });\r\n    //         if (key_index.includes(curr_key)){\r\n\r\n    //         }\r\n    //     });\r\n\r\n    // }\r\n\r\n    // replace val1 with val2, can not handle mutiple level objects\r\n    async replace(val1, val2) {\r\n        this.df = this.df.map(row => {\r\n            let temp = row\r\n            for (const [key, value] of Object.entries(row)) {\r\n                if (value == val1) row[key] = val2\r\n            }\r\n            return temp\r\n        })\r\n    }\r\n\r\n    // missing value will be replaced by null\r\n    async replace_missing(missing=\"\") {\r\n        this.df = this.df.map(row => {\r\n            let temp = row\r\n            for (const [key, value] of Object.entries(row)) {\r\n                if (value == missing) row[key] = null\r\n            }\r\n            return temp\r\n        })\r\n    }\r\n\r\n    // change data from table to list\r\n    // cols are key cols\r\n    async table2list(cols, new_key_1, new_key_2, df = this.df) {\r\n        var res = []\r\n        df.forEach(row => {\r\n            for (const [key, value] of Object.entries(row)) {\r\n                if (!cols.includes(key)) {\r\n                    var temp = {}\r\n                    cols.forEach(c => temp[c] = row[c])\r\n                    temp[new_key_1] = key\r\n                    temp[new_key_2] = value\r\n                    res.push(temp)\r\n                }\r\n            }\r\n        });\r\n        // TODO remove_duplicate\r\n        return res\r\n    }\r\n\r\n\r\n}","import data_clean from \"./data_clean\"\r\nimport {\r\n    std,\r\n    min,\r\n    max,\r\n    mean,\r\n    median,\r\n    sum,\r\n} from 'mathjs'\r\n// NOTE: mathjs cannot take null\r\n\r\n// perform data selection, grouping, averaging, mostly like pandas\r\nexport default class data_filter extends data_clean {\r\n    constructor(df=[],fetch=\"\") {\r\n        super(df,fetch)\r\n    }\r\n\r\n    // TODO support general functions\r\n    // set a new col based on func and cols \r\n    async add_new_col(new_col, cols) {\r\n        this.df = this.df.map(row => {\r\n            var val = 0\r\n            cols.forEach(c => {\r\n                if (!isNaN(row[c])) val += Number(row[c])\r\n            });\r\n            row[new_col] = val\r\n            return row\r\n        })\r\n    }\r\n\r\n    // add new col with new Date\r\n    add_date(col) {\r\n        this.df = this.df.map(row => {\r\n            row[\"_date\"] = new Date(row[col])\r\n            return row\r\n        })\r\n    }\r\n\r\n    // set col values types\r\n    set_col(col, type) {\r\n        this.df = this.df.map(x => {\r\n            switch (type) {\r\n                case \"num\":\r\n                    x[col] = Number(x[col]);\r\n                    break;\r\n                case \"date\":\r\n                    x[col] = new Date(x[col]);\r\n                    break;\r\n                case \"int\":\r\n                    x[col] = parseInt(x[col]);\r\n                    break;\r\n                case \"float\":\r\n                    x[col] = parseFloat(x[col]);\r\n                    break;\r\n            }\r\n            return x\r\n        })\r\n    }\r\n\r\n    get_col(col) {\r\n        return this.df.map(x => x[col])\r\n    }\r\n\r\n    // filter a column based on value array\r\n    filter_col(col, val) {\r\n        // col: col name\r\n        // val: array\r\n        var res = this.df.filter(item => {\r\n            return val.includes(item[col])\r\n        })\r\n        return res\r\n    }\r\n\r\n    // get unique values for a column\r\n    unique_col(col, df = this.df) {\r\n        var res = df.reduce((prev, curr) => {\r\n            if (curr[col] != \"\" && !prev.includes(curr[col])) {\r\n                prev.push(curr[col])\r\n            }\r\n            return prev\r\n        }, [])\r\n        return res\r\n    }\r\n\r\n    // get statistic for a col\r\n    // can calculate stats if other df is provided\r\n    stats_col(col, func, df = this.df) {\r\n        var res\r\n        var y = df.filter(x => x[col] != null).map(x => x[col])\r\n        if (y.length == 0) return null\r\n        switch (func) {\r\n            case \"min\":\r\n                res = min(y)\r\n                break;\r\n            case \"max\":\r\n                res = max(y)\r\n                break;\r\n            case \"mean\":\r\n                res = mean(y)\r\n                break;\r\n            case \"std\":\r\n                res = std(y)\r\n                break;\r\n            case \"median\":\r\n                res = median(y)\r\n                break;\r\n            case \"sum\":\r\n                res = sum(y)\r\n                break;\r\n            case \"count\":\r\n                res = y.length\r\n                break;\r\n        }\r\n        return Math.round(res * 100) / 100\r\n    }\r\n\r\n    // get grouped col2 based on col1\r\n    // aggregated with 6 func: min, max, mean, median, count, sum\r\n    group_by_col(col1, col2, func, df = this.df) {\r\n        var group = this.unique_col(col1, df)\r\n        var res = []\r\n        group.forEach(g => {\r\n            var res_row = {}\r\n            res_row[col1] = g\r\n            var temp = df.filter(x => x[col1] == g)\r\n            if (temp.length > 0) {\r\n                res_row[col2] = this.stats_col(col2, func, temp)\r\n            } else res_row[col2] = null\r\n            res.push(res_row)\r\n        })\r\n        return res\r\n    }\r\n\r\n    // sort based on col\r\n    \r\n\r\n}","import data_filter from \"./data_filter\"\r\n\r\nexport default class extends data_filter{\r\n    constructor(df=[],fetch=\"\") {\r\n        super(df,fetch)\r\n    }\r\n}","import dateFormat from \"dateformat\";\r\n\r\n// this class handles all the date related transformation and calculations\r\nexport default class {\r\n    // generate each day in a range\r\n    // TODO generate each period in a range\r\n    getDaysArray(start, end, format = \"mm/dd/yyyy\") {\r\n        start = new Date(start)\r\n        end = new Date(end)\r\n        for (var arr = [], dt = start; dt <= end; dt.setDate(dt.getDate() + 1)) {\r\n            arr.push(dateFormat(new Date(dt), format));\r\n        }\r\n        return arr;\r\n    }\r\n\r\n}\r\n","import data_model from \"./src/data_model\"\r\nimport date_format from \"./src/date_format\"\r\n\r\nexport default class extends data_model {\r\n\r\n    constructor(df=[],fetch=\"\",read=\"\") {\r\n        super(df,fetch,read)\r\n        this.date_format = new date_format()\r\n        this.filter=[]\r\n        this.df_filter=[]\r\n    }\r\n\r\n\r\n}","import Plotly from 'plotly.js'\r\n\r\nexport default class {\r\n    // default plotly settings\r\n    config = {\r\n        displaylogo: false,\r\n        responsive: true,\r\n        displayModeBar: false,\r\n        staticPlot: false,\r\n        editable: false,\r\n        mapboxAccessToken: \"pk.eyJ1IjoiZGVmdmUxOTg4IiwiYSI6ImNrNzNzZmN3dzBmMnMzZ3FvMzJ0MDRpa2QifQ.xLG4lim5AonGbkDtgP9-5A\",\r\n    }\r\n    // NOTE: if the parameter are previously set, we can access them directly in future\r\n    // like : this.layout.mapbox.style = 'dark'\r\n    layout = {\r\n        // figure size related\r\n        width: 200,\r\n        height: 200,\r\n        autosize: true,\r\n        margin: {\r\n            r: 0,\r\n            t: 0,\r\n            b: 0,\r\n            l: 0\r\n        },\r\n        // title\r\n        title: \"\",\r\n        // axis\r\n        xaxis: {\r\n            title: \"\",\r\n            titlefont: {\r\n                size: 10,\r\n                family: '',\r\n                color: 'black'\r\n            },\r\n            showticklabels: true,\r\n            showline: true,\r\n            showgrid: true,\r\n            zeroline: true,\r\n            autotick: true,\r\n        },\r\n        yaxis: {\r\n            title: \"\",\r\n            titlefont: {\r\n                size: 10,\r\n                family: '',\r\n                color: 'black'\r\n            },\r\n            showticklabels: true,\r\n            showline: true,\r\n            showgrid: true,\r\n            zeroline: true,\r\n            autotick: true,\r\n        },\r\n        // font\r\n        font: {\r\n            size: 14,\r\n            family: '',\r\n            color: 'black'\r\n        },\r\n        // legend\r\n        showlegend: false,\r\n        legend: {\r\n            font: {\r\n                size: 10,\r\n                family: '',\r\n                color: 'black'\r\n            },\r\n            xanchor: \"auto\",\r\n            yanchor: \"auto\",\r\n            x: 1,\r\n            y: 0\r\n        },\r\n        // color bar\r\n        coloraxis: {\r\n            colorscale: \"Viridis\",\r\n            colorbar: {\r\n                xanchor: \"right\",\r\n                yanchor: \"top\",\r\n                x: 1,\r\n                y: 1,\r\n                len: 0.3\r\n            },\r\n        },\r\n        // others\r\n        dragmode: \"zoom\",\r\n        bargap: 0.05,\r\n        bargroupgap: 0.2,\r\n        barmode: \"overlay\",\r\n        // map box style\r\n        mapbox: {\r\n            style: \"light\",\r\n            center: {\r\n                lat: 0,\r\n                lon: 0\r\n            },\r\n            zoom: 2,\r\n        },\r\n\r\n    }\r\n\r\n    constructor(div, fig_type) {\r\n        this.div = div\r\n        this.fig_type = fig_type\r\n        this.trace = []\r\n\r\n        // this.set_fig()\r\n    }\r\n\r\n    set_layout(layout){\r\n        Object.assign(this.layout,layout)\r\n    }\r\n\r\n    set_config(config){\r\n        Object.assign(this.config,config)\r\n    }\r\n\r\n    hex2rgba(hex, alpha) {\r\n        // convert hex color to rgba\r\n        hex = hex.substring(1, )\r\n        if (hex.length === 3) {\r\n            hex = `${hex[0]}${hex[0]}${hex[1]}${hex[1]}${hex[2]}${hex[2]}`;\r\n        }\r\n    \r\n        const r = parseInt(hex.substring(0, 2), 16);\r\n        const g = parseInt(hex.substring(2, 4), 16);\r\n        const b = parseInt(hex.substring(4, 6), 16);\r\n    \r\n        return `rgba(${r},${g},${b},${alpha})`;\r\n    }\r\n\r\n    set_trace(trace) {\r\n        this.trace = this.trace.concat(trace)\r\n    }\r\n\r\n    plot_new(trace = this.trace, animated = false, animate_x = false) {\r\n        if (animated) {\r\n            var start_trace = []\r\n            trace.forEach(t => {\r\n                var temp = {}\r\n                for (const [key, value] of Object.entries(t)) {\r\n                    temp[key] = value\r\n                }\r\n                if (animate_x) {\r\n                    temp.x = temp.x.map(x => x == null ? null : 0)\r\n                }\r\n                temp.y = temp.y.map(x => x == null ? null : 0)\r\n                start_trace.push(temp)\r\n            })\r\n            Plotly.newPlot(this.div, start_trace, this.layout, this.config);\r\n            Plotly.animate(this.div, {\r\n                data: trace,\r\n                traces: Array.from(Array(trace.length).keys()),\r\n            }, {\r\n                transition: {\r\n                    duration: 1000,\r\n                    easing: 'cubic-in-out'\r\n                },\r\n            })\r\n        } else {\r\n            Plotly.newPlot(this.div, trace, this.layout, this.config);\r\n        }\r\n    }\r\n\r\n    add_trace(trace = this.trace) {\r\n        // console.log(trace)\r\n        Plotly.addTraces(this.div, trace);\r\n    }\r\n\r\n    update_layout() {\r\n        // must be plot first\r\n        Plotly.relayout(this.div, this.layout);\r\n    }\r\n\r\n    clear_image() {\r\n        Plotly.purge(this.div)\r\n    }\r\n\r\n    save_image(file_name) {\r\n        Plotly.toImage(\r\n            this.div, {\r\n                format: 'png',\r\n                height: 800,\r\n                width: 1200,\r\n            }).then(\r\n            function (url) {\r\n                var pom = document.createElement(\"a\");\r\n                pom.href = url;\r\n                pom.setAttribute(\"download\", file_name + \".png\");\r\n                pom.click();\r\n            });\r\n    }\r\n\r\n    del_trace(index) {\r\n        Plotly.deleteTraces(this.div, index)\r\n    }\r\n\r\n    set_fig(fig_type = this.fig_type) {\r\n        switch (fig_type) {\r\n            case \"thumb\":\r\n                this.config.staticPlot = true\r\n                this.layout.showlegend = false\r\n                this.layout.xaxis.showticklabels = false;\r\n                this.layout.yaxis.showticklabels = false;\r\n                this.layout.xaxis.zeroline = false;\r\n                this.layout.height = 180\r\n                this.layout.width = 300\r\n                this.layout.margin = {\r\n                    r: 20,\r\n                    t: 25,\r\n                    b: 25,\r\n                    l: 20\r\n                }\r\n                break\r\n            case \"small\":\r\n                this.config.staticPlot = true\r\n                this.layout.showlegend = false\r\n                this.layout.xaxis.showticklabels = false;\r\n                this.layout.yaxis.showticklabels = false;\r\n                this.layout.xaxis.zeroline = false;\r\n                this.layout.height = 180\r\n                this.layout.width = 300\r\n                this.layout.margin = {\r\n                    r: 20,\r\n                    t: 25,\r\n                    b: 25,\r\n                    l: 20\r\n                }\r\n                break\r\n            case \"meduim\":\r\n                this.layout.height = 400\r\n                this.layout.width = 800\r\n                this.layout.margin = {\r\n                    r: 20,\r\n                    t: 50,\r\n                    b: 25,\r\n                    l: 20\r\n                }\r\n                break\r\n            case \"large\":\r\n                this.config.editable = true\r\n                this.layout.height = 600\r\n                this.layout.width = 1200\r\n                this.layout.margin = {\r\n                    r: 100,\r\n                    t: 50,\r\n                    b: 75,\r\n                    l: 125\r\n                }\r\n                break\r\n        }\r\n\r\n    }\r\n}","import plotly_func from \"./plotly_func\"\r\n\r\nexport default class extends plotly_func {\r\n    color_theme = [\r\n        '#1E88E5',\r\n        '#28965A',\r\n        '#E53E20',\r\n        '#7CB342',\r\n        '#d95282',\r\n        '#FBC02D',\r\n        '#00B8DC',\r\n        '#232322',\r\n        '#AAAAAA',\r\n    ]\r\n    constructor(div, fig_type, plot_type) {\r\n        super(div, fig_type)\r\n        this.plot_type = plot_type\r\n        // this.set_plot_func()\r\n\r\n        this.set_fig()\r\n\r\n    }\r\n\r\n    set_trace_func() {\r\n        switch (this.plot_type) {\r\n            case \"wind_rose\":\r\n                this.gen_trace = this.gen_wind_rose\r\n                break\r\n            case \"hist\":\r\n                this.gen_trace = this.gen_hist\r\n                break\r\n        }\r\n    }\r\n\r\n    gen_hist(data, max_y, bin_num = 100) {\r\n        var trace = []\r\n        data.forEach((d,) => {\r\n            var color_index = Math.floor(Math.random() * Math.floor(8))\r\n            trace.push({\r\n                x: d.x,\r\n                name: d.y_name,\r\n                xbins: {\r\n                    end: max_y,\r\n                    start: 0,\r\n                    size: max_y / bin_num,\r\n                },\r\n                autobinx: true,\r\n                histnorm: \"counts\",\r\n                marker: {\r\n                    color: this.hex2rgba(this.color_theme[color_index], 0.5),\r\n                    line: {\r\n                        color: this.hex2rgba(this.color_theme[color_index], 1),\r\n                        width: 0.5\r\n                    }\r\n                },\r\n                opacity: 0.8,\r\n                type: \"histogram\",\r\n            })\r\n        })\r\n        this.trace = trace\r\n        this.plot_new()\r\n        // if (update) this.trace = this.trace.concat(trace)\r\n        // if (plot) this.plot_new()\r\n        // console.log(trace)\r\n        // return trace\r\n    }\r\n\r\n    gen_scatter(data) {\r\n        var trace = []\r\n        data.forEach((d,) => {\r\n            var color_index = Math.floor(Math.random() * Math.floor(8))\r\n            trace.push({\r\n                x: d.x,\r\n                y: d.y,\r\n                text:d.text,\r\n                type: 'scatter',\r\n                mode: 'markers',\r\n                name: d.y_name,\r\n                marker: {\r\n                    size: 6,\r\n                    color: this.hex2rgba(this.color_theme[color_index], 0.8)\r\n                },\r\n            })\r\n        })\r\n        this.trace = trace\r\n        this.plot_new()\r\n        // if (update) this.trace = this.trace.concat(trace)\r\n        // if (plot) this.plot_new()\r\n        // console.log(trace)\r\n        // return trace\r\n    }\r\n\r\n    gen_bar(data) {\r\n        var trace = []\r\n        data.forEach((d,) => {\r\n            var color_index = Math.floor(Math.random() * Math.floor(8))\r\n            trace.push({\r\n                x: d.x,\r\n                y: d.y,\r\n                type: 'bar',\r\n                marker: {\r\n                    color: this.hex2rgba(this.color_theme[color_index], 0.5),\r\n                    line: {\r\n                        color: this.hex2rgba(this.color_theme[color_index], 1),\r\n                        width: 0.5\r\n                    }\r\n                },\r\n            })\r\n        })\r\n        this.trace = trace\r\n        this.plot_new()\r\n        // if (update) this.trace = this.trace.concat(trace)\r\n        // if (plot) this.plot_new()\r\n        // console.log(trace)\r\n        // return trace\r\n    }\r\n\r\n    gen_line() {\r\n\r\n    }\r\n\r\n    gen_wind_rose(data, update = true, plot = true) {\r\n        let d = [\"North\", \"NNE\", \"NE\", \"ENE\", \"East\", \"ESE\", \"SE\", \"SSE\", \"South\", \"SSW\", \"SW\", \"WSW\", \"West\", \"WNS\", \"NW\", \"NNW\"]\r\n        var trace = []\r\n        if (data == null) {\r\n            trace = [{\r\n                r: new Array(16).fill(0),\r\n                theta: d,\r\n                type: \"barpolar\"\r\n            },]\r\n        }\r\n        else trace = data\r\n\r\n        this.layout.polar = {\r\n            barmode: \"overlay\",\r\n            bargap: 0,\r\n            radialaxis: {\r\n                ticksuffix: \"%\",\r\n                angle: 45,\r\n                dtick: 5\r\n            },\r\n            angularaxis: {\r\n                direction: \"clockwise\"\r\n            },\r\n        }\r\n\r\n        if (update) this.trace = this.trace.concat(trace)\r\n        if (plot) this.plot_new()\r\n        console.log(trace)\r\n        return trace\r\n    }\r\n\r\n}","import plotly_func from \"./plotly_func\"\r\nimport {\r\n    mean\r\n} from \"mathjs\";\r\n\r\nexport default class extends plotly_func {\r\n    color_theme = [\r\n        '#1E88E5',\r\n        '#28965A',\r\n        '#E53E20',\r\n        '#7CB342',\r\n        '#d95282',\r\n        '#FBC02D',\r\n        '#00B8DC',\r\n        '#232322',\r\n        '#AAAAAA',\r\n    ]\r\n    constructor(div, fig_type) {\r\n        super(div, fig_type)\r\n        this.clear_image()\r\n    }\r\n\r\n    async gen_dots(data, show_text = null, update = true, plot = true) {\r\n        // gen one group of dots \r\n        var trace = [{\r\n            type: \"scattermapbox\",\r\n            text: data.text,\r\n            lon: data.lon,\r\n            lat: data.lat,\r\n            hovertemplate: '%{text}<br>' +\r\n                '%{lat:.2f}, %{lon:.2f}' +\r\n                '<extra></extra>',\r\n            hoverlabel: {\r\n                bgcolor: \"rgba(70,70,70,1)\"\r\n            },\r\n            marker: {\r\n                color: \"rgb(0, 150, 100)\",\r\n                size: 12,\r\n                opacity: 0.5\r\n            }\r\n        }];\r\n\r\n        if (show_text != null) {\r\n            trace = trace.map(x => {\r\n                x.mode = 'markers+text',\r\n                    x.textposition = show_text;\r\n                return x\r\n            })\r\n        }\r\n\r\n        if (data.lon.length > 0) {\r\n            this.layout.mapbox.zoom = 4\r\n            this.layout.mapbox.center = {\r\n                lat: mean(data.lat),\r\n                lon: mean(data.lon)\r\n            }\r\n        }\r\n        if (update) this.trace = this.trace.concat(trace)\r\n        if (plot) this.plot_new()\r\n        // console.log(trace)\r\n        return trace\r\n    }\r\n\r\n    async plot_map_scatter(data, update = true) {\r\n        var trace = [];\r\n        trace = [{\r\n            type: \"scattermapbox\",\r\n            name: data.map((x) => x.name),\r\n            text: data.map((x) => x.text),\r\n            lon: data.map((x) => x.lon),\r\n            lat: data.map((x) => x.lat),\r\n            hovertemplate: '%{text}<br>' +\r\n                '%{lat:.2f}, %{lon:.2f}' +\r\n                '<extra></extra>',\r\n            hoverlabel: {\r\n                bgcolor: \"rgba(70,70,70,1)\"\r\n            },\r\n            marker: {\r\n                color: data.map((x) => x.color),\r\n                size: data.map((x) => x.size),\r\n                opacity: data.map((x) => x.op),\r\n            },\r\n            showlegend: false,\r\n        },];\r\n        if (update) {\r\n            this.trace = trace\r\n            this.add_trace()\r\n            this.del_trace(0)\r\n        }\r\n        else {\r\n            this.trace = this.trace.concat(trace)\r\n            this.plot_new()\r\n        }\r\n    }\r\n\r\n}","import * as d3 from \"d3\";\r\nimport dateFormat from \"dateformat\";\r\n\r\n\r\nexport default class {\r\n    constructor(plot_config) {\r\n        this.plot_config = plot_config\r\n        this.div = this.plot_config.div\r\n        this.layout = this.plot_config.layout\r\n        this.svg = null\r\n        this.ticker = null\r\n    }\r\n    gen_dataSlice(date) {\r\n        let dateSlice = this.race_data\r\n            .filter((d) => d.date == date && !isNaN(d.value))\r\n            .sort((a, b) => b.value - a.value)\r\n            .slice(0, this.top_n);\r\n\r\n        dateSlice.forEach((d, i) => (d.rank = i));\r\n        return dateSlice\r\n    }\r\n    gene_race_data(data, date_list, col) {\r\n        var race_data = []\r\n        var country_color = {}\r\n        data.forEach(row => {\r\n            country_color[row.country] = d3.hsl(Math.random() * 360, 0.75, 0.75)\r\n        })\r\n\r\n        data.forEach(row => {\r\n            row.location.forEach(l => {\r\n                var loc = l.name\r\n                date_list.forEach((d, index) => {\r\n                    if (col in row.data[loc]) {\r\n                        var prev_date = index == 0 ? d : date_list[index - 1]\r\n                        var loc_name\r\n                        if (loc == \"tot\") {\r\n                            loc_name = row.country\r\n                        } else if (row.country != \"US\") {\r\n                            loc_name = loc + \", \" + row.country\r\n                        } else {\r\n                            loc_name = loc\r\n                        }\r\n                        race_data.push({\r\n                            value: row.data[loc][col][d],\r\n                            lastValue: row.data[loc][col][prev_date],\r\n                            date: d,\r\n                            name: loc_name,\r\n                            colour: country_color[row.country]\r\n                        })\r\n                    }\r\n                })\r\n            })\r\n        })\r\n        return race_data\r\n\r\n    }\r\n    restart_race() {\r\n        this.update_ticker()\r\n    }\r\n    stop_race() {\r\n        this.ticker.stop()\r\n    }\r\n    init_race(data, date_list, col) {\r\n        this.date_list = date_list\r\n        this.col = col\r\n        this.top_n = this.layout.top_n\r\n        this.width = this.layout.width\r\n        this.height = this.layout.height\r\n        this.margin = this.layout.margin\r\n        this.tickDuration = this.layout.tickDuration;\r\n        this.barPadding = (this.height - (this.margin.bottom + this.margin.top)) / (this.top_n * 5);\r\n        this.ticker = null\r\n        \r\n        if (this.svg != null) {\r\n            console.log(this.svg)\r\n            this.svg.selectAll(\"*\").remove();\r\n        } else {\r\n            this.svg = d3\r\n                .select(this.div)\r\n                .append(\"svg\")\r\n                .attr(\"width\", this.width)\r\n                .attr(\"height\", this.height);\r\n        }\r\n\r\n        // this.svg.append('text')\r\n        //     .attr('x', 20)\r\n        //     .attr('y', 20)\r\n        //     .text(this.plot_config.title)\r\n        //     .style(\"font-size\", \"14px\")\r\n        //     .style(\"fill\", \"white\");\r\n\r\n        this.race_data = this.gene_race_data(data, date_list, col)\r\n\r\n        this.date_index = 0\r\n        this.date = date_list[this.date_index];\r\n        let dateSlice = this.gen_dataSlice(this.date)\r\n\r\n        this.x = d3\r\n            .scaleLinear()\r\n            .domain([0, d3.max(dateSlice, (d) => d.value)])\r\n            .range([this.margin.left, this.width - this.margin.right - 65]);\r\n\r\n        this.y = d3\r\n            .scaleLinear()\r\n            .domain([this.top_n, 0])\r\n            .range([this.height - this.margin.bottom, this.margin.top]);\r\n\r\n        this.xAxis = d3\r\n            .axisTop()\r\n            .scale(this.x)\r\n            .ticks(this.width > 500 ? 5 : 2)\r\n            .tickSize(-(this.height - this.margin.top - this.margin.bottom))\r\n            .tickFormat((d) => d3.format(\",\")(d));\r\n\r\n        this.svg\r\n            .append(\"g\")\r\n            .attr(\"class\", \"axis xAxis\")\r\n            .attr(\"transform\", `translate(0, ${this.margin.top})`)\r\n            .call(this.xAxis)\r\n            .selectAll(\".tick line\")\r\n            .classed(\"origin\", (d) => d == 0);\r\n\r\n\r\n        this.svg\r\n            .selectAll(\"rect.bar\")\r\n            .data(dateSlice, (d) => d.name)\r\n            .enter()\r\n            .append(\"rect\")\r\n            .attr(\"class\", \"bar\")\r\n            .attr(\"x\", this.x(0) + 1)\r\n            .attr(\"width\", (d) => this.x(d.value) - this.x(0))\r\n            .attr(\"y\", (d) => this.y(d.rank) + 5)\r\n            .attr(\"height\", this.y(1) - this.y(0) - this.barPadding)\r\n            .style(\"fill\", (d) => d.colour);\r\n\r\n        this.svg\r\n            .selectAll(\"text.label\")\r\n            .data(dateSlice, (d) => d.name)\r\n            .enter()\r\n            .append(\"text\")\r\n            .attr(\"class\", \"label\")\r\n            .attr(\"x\", (d) => this.x(d.value) + 5)\r\n            .attr(\"y\", (d) => this.y(d.rank) + (this.y(1) - this.y(0)) / 2 + 9)\r\n            .style(\"text-anchor\", \"start\")\r\n            .html((d) => d.name)\r\n            .style(\"fill\", d => d.colour);\r\n\r\n        this.svg\r\n            .selectAll(\"text.valueLabel\")\r\n            .data(dateSlice, (d) => d.name)\r\n            .enter()\r\n            .append(\"text\")\r\n            .attr(\"class\", \"valueLabel\")\r\n            .attr(\"x\", () => this.x(0) + 5)\r\n            .attr(\"y\", (d) => this.y(d.rank) + (this.y(1) - this.y(0)) / 2 + 9)\r\n            .style(\"text-anchor\", \"end\")\r\n            .text((d) => d3.format(\",.0f\")(d.lastValue))\r\n            .style(\"fill\", \"grey\");\r\n\r\n            this.svg\r\n            .append(\"rect\")\r\n            .attr(\"x\", this.width - this.margin.right - 195)\r\n            .attr(\"y\", this.height - 50)\r\n            .attr(\"width\",150)\r\n            .attr(\"height\",35)\r\n            .style(\"fill\", \"#424242\")\r\n\r\n        this.dateText = this.svg\r\n            .append(\"text\")\r\n            .attr(\"x\", this.width - this.margin.right - 50)\r\n            .attr(\"y\", this.height - 25)\r\n            .style(\"text-anchor\", \"end\")\r\n            .style(\"font-size\", \"25px\")\r\n            .attr(\"font-weight\", 800)\r\n            .style(\"fill\", \"white\")\r\n            .text(dateFormat(new Date(this.date), \"yyyy-mm-dd\"));\r\n\r\n        this.update_ticker()\r\n    }\r\n    update_ticker() {\r\n        function update() {\r\n            var dateSlice = obj.gen_dataSlice(obj.date)\r\n            // console.log('IntervalYear: ', dateSlice);\r\n\r\n            obj.x.domain([0, d3.max(dateSlice, (d) => d.value)]);\r\n\r\n            obj.svg\r\n                .select(\".xAxis\")\r\n                .transition()\r\n                .duration(obj.tickDuration)\r\n                .ease(d3.easeLinear)\r\n                .call(obj.xAxis);\r\n\r\n            let bars = obj.svg.selectAll(\".bar\").data(dateSlice, (d) => d.name);\r\n\r\n            bars\r\n                .enter()\r\n                .append(\"rect\")\r\n                .attr(\"class\", (d) => `bar ${d.name.replace(/\\s/g, \"_\")}`)\r\n                .attr(\"x\", obj.x(0) + 1)\r\n                .attr(\"width\", (d) => obj.x(d.value) - obj.x(0))\r\n                .attr(\"y\", () => obj.y(obj.top_n + 1) + 5)\r\n                .attr(\"height\", obj.y(1) - obj.y(0) - obj.barPadding)\r\n                .style(\"fill\", (d) => d.colour)\r\n                .transition()\r\n                .duration(obj.tickDuration)\r\n                .ease(d3.easeLinear)\r\n                .attr(\"y\", (d) => obj.y(d.rank) + 5);\r\n\r\n            bars\r\n                .transition()\r\n                .duration(obj.tickDuration)\r\n                .ease(d3.easeLinear)\r\n                .attr(\"width\", (d) => obj.x(d.value) - obj.x(0))\r\n                .attr(\"y\", (d) => obj.y(d.rank) + 5);\r\n\r\n            bars\r\n                .exit()\r\n                .transition()\r\n                .duration(obj.tickDuration)\r\n                .ease(d3.easeLinear)\r\n                .attr(\"width\", (d) => obj.x(d.value) - obj.x(0))\r\n                .attr(\"y\", () => obj.y(obj.top_n + 1) + 5)\r\n                .remove();\r\n\r\n            let labels = obj.svg.selectAll(\".label\").data(dateSlice, (d) => d.name);\r\n\r\n            labels\r\n                .enter()\r\n                .append(\"text\")\r\n                .attr(\"class\", \"label\")\r\n                .attr(\"x\", (d) => obj.x(d.value) + 12)\r\n                .attr(\"y\", () => obj.y(obj.top_n + 1) + (obj.y(1) - obj.y(0)) / 2 + 9)\r\n                .style(\"text-anchor\", \"start\")\r\n                .html((d) => d.name)\r\n                .style(\"fill\", d => d.colour)\r\n                .transition()\r\n                .duration(obj.tickDuration)\r\n                .ease(d3.easeLinear)\r\n                .attr(\"y\", (d) => obj.y(d.rank) + (obj.y(1) - obj.y(0)) / 2 + 9);\r\n\r\n            labels\r\n                .transition()\r\n                .duration(obj.tickDuration)\r\n                .ease(d3.easeLinear)\r\n                .attr(\"x\", (d) => obj.x(d.value) + 12)\r\n                .attr(\"y\", (d) => obj.y(d.rank) + (obj.y(1) - obj.y(0)) / 2 + 9);\r\n\r\n            labels\r\n                .exit()\r\n                .transition()\r\n                .duration(obj.tickDuration)\r\n                .ease(d3.easeLinear)\r\n                .attr(\"x\", (d) => obj.x(d.value) + 12)\r\n                .attr(\"y\", () => obj.y(obj.top_n + 1) + 9)\r\n                .remove();\r\n\r\n            let valueLabels = obj.svg\r\n                .selectAll(\".valueLabel\")\r\n                .data(dateSlice, (d) => d.name);\r\n\r\n            valueLabels\r\n                .enter()\r\n                .append(\"text\")\r\n                .attr(\"class\", \"valueLabel\")\r\n                .attr(\"x\", () => obj.x(0) - 5)\r\n                .attr(\"y\", () => obj.y(obj.top_n + 1) + 9)\r\n                .text((d) => d3.format(\",.0f\")(d.lastValue))\r\n                .style(\"text-anchor\", \"end\")\r\n                .style(\"fill\", \"grey\")\r\n                .transition()\r\n                .duration(obj.tickDuration)\r\n                .ease(d3.easeLinear)\r\n                .attr(\"y\", (d) => obj.y(d.rank) + (obj.y(1) - obj.y(0)) / 2 + 9);\r\n\r\n            valueLabels\r\n                .transition()\r\n                .duration(obj.tickDuration)\r\n                .ease(d3.easeLinear)\r\n                .attr(\"x\", () => obj.x(0) - 5)\r\n                .attr(\"y\", (d) => obj.y(d.rank) + (obj.y(1) - obj.y(0)) / 2 + 9)\r\n                .tween(\"text\", function (d) {\r\n                    let i = d3.interpolateRound(d.lastValue, d.value);\r\n                    return function (t) {\r\n                        this.textContent = d3.format(\",\")(i(t));\r\n                    };\r\n                });\r\n\r\n            valueLabels\r\n                .exit()\r\n                .transition()\r\n                .duration(obj.tickDuration)\r\n                .ease(d3.easeLinear)\r\n                .attr(\"x\", () => obj.x(0) - 5)\r\n                .attr(\"y\", () => obj.y(obj.top_n + 2) + 9)\r\n                .remove();\r\n\r\n            obj.dateText.text(dateFormat(new Date(obj.date), \"yyyy-mm-dd\"));\r\n\r\n            if (obj.date_index == obj.date_list.length - 1) obj.ticker.stop()\r\n            obj.date_index++\r\n            obj.date = obj.date_list[obj.date_index];\r\n        }\r\n\r\n        var obj = this\r\n        if (this.ticker==null){\r\n            this.ticker = d3.interval(update, this.tickDuration)\r\n        }\r\n        else{\r\n            this.ticker.restart(update,this.tickDuration)\r\n        }\r\n    }\r\n\r\n}","import plotly_fig from \"./src/plotly_fig\"\r\nimport map_box from \"./src/map_box\"\r\n\r\nimport bar_race from \"./src/bar_race\"\r\n\r\n\r\n// plot_config = {\r\n//     viz_type: \"plotly\",\r\n//     id:\"\",\r\n//     name:\"\",\r\n//     x_title:\"\",\r\n//     y_title:\"\",\r\n//     x_col:\"\",\r\n//     y_col:\"\",\r\n//     plot_type:null,\r\n//     trace_data:null,\r\n//     layout:null,\r\n\r\n// }\r\n\r\nexport default class {\r\n    init_config(plot_config){\r\n        this.plot_config = plot_config\r\n        var viz = this.plot_config.viz_type\r\n        var div = this.plot_config.div\r\n        var fig_type = this.plot_config.fig_type\r\n        var layout = this.plot_config.layout\r\n        var config = this.plot_config.config\r\n\r\n        switch (viz) {\r\n            case \"plotly\":\r\n                var plot_type = this.plot_config.plot_type\r\n                this.plot_obj = new plotly_fig(div, fig_type, plot_type)\r\n                this.plot_obj.set_layout(layout)\r\n                this.plot_obj.set_config(config)\r\n                break\r\n            case \"mapbox\":\r\n                this.plot_obj = new map_box(div, fig_type)\r\n                this.plot_obj.set_layout(layout)\r\n                this.plot_obj.set_config(config)\r\n                break\r\n            case \"bar_race\":\r\n                this.plot_obj = new bar_race(plot_config)\r\n                break\r\n        }\r\n    }\r\n\r\n}","import my_df from \"@/my_df\"\r\nimport my_plot from \"@/my_plot\"\r\nimport json from \"@/assets/ca_wildfire_final.json\"\r\n\r\nconst state = {\r\n  data: new my_df(json),\r\n  date_range: [],\r\n  year_range: [],\r\n  slider: 0,\r\n  map_view: new my_plot(),\r\n  map_trace: [],\r\n  hist_view: new my_plot(),\r\n  hist_trace: [],\r\n  scatter_view: new my_plot(),\r\n  scatter_trace: [],\r\n  bar_view: new my_plot(),\r\n  bar_trace: [],\r\n  include_all: true,\r\n};\r\n\r\nconst getters = {\r\n\r\n};\r\n\r\nconst actions = {\r\n\r\n};\r\n\r\nconst mutations = {\r\n  TEST(state) { console.log(state) },\r\n  INIT_DF(state) {\r\n    var date = []\r\n    var year = []\r\n    state.data.df.forEach((r) => {\r\n      r.Started = new Date(r.Started.replace(\"T\", \" \").replace(\"Z\", \" \"));\r\n      // if (r.Extinguished==null) {\r\n      //   var p=new Date()\r\n      //   p = p.getFullYear() + \"-\" + Number(p.getMonth() + 1) + \"-\" + p.getDate()\r\n      //   console.log(p)\r\n      // }\r\n      r.end =\r\n        r.Extinguished == null\r\n          ? new Date()\r\n          : new Date(r.Extinguished.replace(\"T\", \" \").replace(\"Z\", \" \"));\r\n      var last_time = r.end - r.Started;\r\n      r.last_time = last_time > 0 ? last_time / 1000 / 3600 / 24 : null;\r\n\r\n      var date_1 = r.Started.getFullYear() + \"-\" + Number(r.Started.getMonth() + 1) + \"-\" + r.Started.getDate()\r\n      var date_2 = r.end.getFullYear() + \"-\" + Number(r.end.getMonth() + 1) + \"-\" + r.end.getDate()\r\n      if (!date.includes(date_1)) date.push(date_1)\r\n      if (!date.includes(date_2)) date.push(date_2)\r\n      if (!year.includes(r.ArchiveYear)) year.push(r.ArchiveYear)\r\n    });\r\n\r\n    state.data.df.sort((a, b) => a.end - b.end)\r\n    date.sort((a, b) => new Date(a) - new Date(b))\r\n    // console.log(date)\r\n    state.date_range = date\r\n    state.year_range = year\r\n    state.slider = date.length\r\n  },\r\n\r\n\r\n  GENE_MAP_TRACE(state, tab) {\r\n    function color_scale(dt) {\r\n      dt = dt / 1000 / 3600 / 24\r\n      var scale = [\r\n        [0, 'rgb(40, 40, 40)'],\r\n        [15, 'rgb(60, 60, 60)'],\r\n        [30, 'rgb(80, 80, 80)'],\r\n        [60, 'rgb(100, 100, 100)'],\r\n        [90, 'rgb(120, 120, 120)'],\r\n        [125, 'rgb(140, 140, 140)'],\r\n        [250, 'rgb(160, 160, 160)'],\r\n        [500, 'rgb(180, 180, 180)'],\r\n        [750, 'rgb(200, 200, 200)'],\r\n        [1000, 'rgb(220, 220, 220)'],\r\n      ]\r\n      var res\r\n      for (let i = 0; i < scale.length; i++) {\r\n        if (dt >= scale[i][0]) {\r\n          res = scale[i][1]\r\n          break;\r\n        }\r\n      }\r\n      return res\r\n    }\r\n\r\n    var date = state.date_range[state.slider]\r\n    var res = []\r\n    state.data.df.forEach(row => {\r\n      if (row.Started < new Date(date)) {\r\n\r\n        let val = 0\r\n        tab.cols.forEach(c => {\r\n          val += row[c]\r\n        })\r\n        var color, op\r\n        if (tab.text == \"Acres Burned\") {\r\n          color = row.end <= new Date(date) ? color_scale(new Date(date) - row.end) : tab.color\r\n          op = row.end <= new Date(date) ? 0.5 : 0.8\r\n        }\r\n        else {\r\n          color = tab.color\r\n          op = 0.5\r\n        }\r\n        if (state.include_all || row.end > new Date(date) || tab.text != \"Acres Burned\") {\r\n          var temp = {\r\n            name: tab.text,\r\n            lat: row.Latitude,\r\n            lon: row.Longitude,\r\n            text: val + \" \" + tab.text + \" | \" + row.Name + \", \" + row.ArchiveYear,\r\n            color: color,\r\n            size: Math.log2(val) + 5,\r\n            op: op\r\n          }\r\n          res.push(temp)\r\n        }\r\n\r\n      }\r\n    })\r\n    // console.log(res)\r\n    state.map_trace = res\r\n  },\r\n\r\n  GENE_HIST_TRACE(state, tab) {\r\n    state.hist_trace = {\r\n      data: [], max_y: -Infinity\r\n    }\r\n    var max_y = -Infinity\r\n\r\n    state.year_range.forEach(y => {\r\n      var res = []\r\n      state.data.df.forEach(row => {\r\n        if (row.ArchiveYear == y) {\r\n          var temp = {\r\n            x: row[tab.cols],\r\n            y_name: [tab.text],\r\n          }\r\n          res.push(temp)\r\n          if (row[tab.cols] > max_y) max_y = row[tab.cols]\r\n        }\r\n      })\r\n\r\n      state.hist_trace.data.push({\r\n        x: res.map(x => x.x),\r\n        y_name: y\r\n      })\r\n    })\r\n    state.hist_trace.max_y = max_y\r\n    console.log(state.hist_trace)\r\n  },\r\n\r\n  GENE_HIST_TRACE_ALL(state, tab) {\r\n    state.hist_trace = {\r\n      data: [], max_y: -Infinity\r\n    }\r\n    var max_y = -Infinity\r\n\r\n    var res = []\r\n    state.data.df.forEach(row => {\r\n      var temp = {\r\n        x: tab.cols == \"AcresBurned\" ? Math.log10(row[tab.cols]) : row[tab.cols],\r\n        y_name: [tab.text],\r\n      }\r\n      res.push(temp)\r\n      if (row[tab.cols] > max_y) max_y = row[tab.cols]\r\n\r\n    })\r\n\r\n    state.hist_trace.data.push({\r\n      x: res.map(x => x.x),\r\n      y_name: tab.cols == \"AcresBurned\" ? \"Log(\" + tab.text + \")\" : tab.text\r\n    })\r\n\r\n    state.hist_trace.max_y = max_y\r\n    console.log(state.hist_trace)\r\n  },\r\n\r\n  GENE_SCATTER(state, xy) {\r\n    var res = []\r\n    var x = xy.x\r\n    var y = xy.y\r\n    state.data.df.forEach(row => {\r\n      var temp = {\r\n        x:  row[x.cols],\r\n        y: row[y.cols],\r\n        text:row.Name\r\n      }\r\n      res.push(temp)\r\n    })\r\n    state.scatter_trace = [{\r\n      x: res.map(x => x.x),\r\n      y: res.map(x => x.y),\r\n      y_name: x.text + '-' + y.text,\r\n      text:res.map(x => x.text),\r\n    }]\r\n  },\r\n\r\n  GENE_BAR(state, ytab) {\r\n    var res = []\r\n    var yselect = ytab.y\r\n\r\n    state.year_range.forEach(year => {\r\n      var y = 0\r\n\r\n      state.data.df.forEach(row => {\r\n        if (row.ArchiveYear == year) {\r\n          y = y + row[yselect.cols]\r\n        }\r\n      })\r\n      res.push({\r\n        x: year,\r\n        y: y\r\n      })\r\n    })\r\n    console.log(res)\r\n    state.bar_trace = [{\r\n      x: res.map(x => x.x),\r\n      y: res.map(x => x.y)\r\n    }]\r\n    // state.bar_trace.max_y = max_y\r\n    console.log(state.bar_trace)\r\n  }\r\n\r\n};\r\n\r\nexport default {\r\n  state,\r\n  getters,\r\n  actions,\r\n  mutations\r\n};","\r\nconst state = {\r\n    show_infor_dialog: false,\r\n    status_calculations: [\r\n        {\r\n            text: \"Total Incidents\",\r\n            col: \"AcresBurned\",\r\n            func: \"count\",\r\n            val: null,\r\n            text_color: \"\"\r\n        },\r\n        {\r\n            text: \"Major Incidents\",\r\n            col: \"MajorIncident\",\r\n            func: \"sum\",\r\n            val: null,\r\n            text_color: \"\",\r\n        },\r\n        \r\n        {\r\n            text: \"Acres Burned\",\r\n            col: \"AcresBurned\",\r\n            func: \"sum\",\r\n            val: null,\r\n            text_color: \"red--text text--darken-1\",\r\n        },\r\n        {\r\n            text: \"Days Burned\",\r\n            col: \"last_time\",\r\n            func: \"sum\",\r\n            val: null,\r\n            text_color: \"\",\r\n        },\r\n        {\r\n            text: \"Personnel Involved\",\r\n            col: \"PersonnelInvolved\",\r\n            func: \"sum\",\r\n            val: null,\r\n            text_color: \"purple--text text--darken-1\",\r\n        },\r\n        {\r\n            text: \"Injuries\",\r\n            col: \"Injuries\",\r\n            func: \"sum\",\r\n            val: null,\r\n            text_color: \"orange--text text--darken-1\"\r\n        },\r\n        {\r\n            text: \"Fatalities\",\r\n            col: \"Fatalities\",\r\n            func: \"sum\",\r\n            val: null,\r\n            text_color: \"brown--text text--darken-1\",\r\n        },\r\n        {\r\n            text: \"Structures Destroyed\",\r\n            col: \"StructuresDestroyed\",\r\n            func: \"sum\",\r\n            val: null,\r\n            text_color: \"\",\r\n        },\r\n        {\r\n            text: \"Structures Damaged\",\r\n            col: \"StructuresDamaged\",\r\n            func: \"sum\",\r\n            val: null,\r\n            text_color: \"\",\r\n        },\r\n    ],\r\n    auto_list: {\r\n        height: 300,\r\n        show: true,\r\n        sort_by: [\r\n            { text: \"Acres Burned\", col: \"AcresBurned\" },\r\n            { text: \"Started Date\", col: \"Started\" },\r\n            { text: \"Days Burned\", col: \"last_time\" },\r\n            { text: \"Injuries\", col: \"Injuries\" },\r\n            { text: \"Fatalities\", col: \"Fatalities\" },\r\n            { text: \"Structures Damaged\", col: \"StructuresDamaged\" },\r\n        ],\r\n    },\r\n    map_setting: {\r\n        center: { lat: 37.5, lon: -121 },\r\n        zoom: 5.2,\r\n        height: 760,\r\n    },\r\n    map_tabs: [\r\n        // method can be overlay\r\n        {\r\n            text: \"Acres Burned\",\r\n            cols: [\"AcresBurned\"],\r\n            method: \"sum\",\r\n            color: \"#E53935\",\r\n        },\r\n        {\r\n            text: \"Personnel Involved\",\r\n            cols: [\"PersonnelInvolved\"],\r\n            method: \"sum\",\r\n            color: \"#8E24AA\",\r\n        },\r\n        { text: \"Injuries\", cols: [\"Injuries\"], method: \"sum\", color: \"#FB8C00\" },\r\n        { text: \"Fatalities\", cols: [\"Fatalities\"], method: \"sum\", color: \"#6D4C41\" },\r\n        {\r\n            text: \"Structures Involved\",\r\n            cols: [\r\n                \"StructuresDestroyed\",\r\n                \"StructuresDamaged\",\r\n                \"StructuresEvacuated\",\r\n                \"StructuresThreatened\",\r\n            ],\r\n            method: \"sum\",\r\n            color: \"#3E2723\",\r\n        },\r\n    ],\r\n\r\n    bar_selector: {\r\n        tabs: [\r\n            {\r\n                text: \"Acres Burned\",\r\n                cols: \"AcresBurned\",\r\n                color: \"red\",\r\n            },\r\n            {\r\n                text: \"Days Burned\",\r\n                cols: \"last_time\",\r\n                color: \"red\",\r\n            },\r\n            {\r\n                text: \"Personnel Involved\",\r\n                cols: \"PersonnelInvolved\",\r\n                color: \"red\",\r\n            },\r\n            { text: \"Injuries\", cols: \"Injuries\", color: \"red\" },\r\n            {\r\n                text: \"Fatalities\",\r\n                cols: \"Fatalities\",\r\n                color: \"red\",\r\n            },\r\n            {\r\n                text: \"Structures Destroyed\",\r\n                cols: \"StructuresDestroyed\",\r\n                color: \"red\",\r\n            },\r\n            {\r\n                text: \"Structures Damaged\",\r\n                cols: \"StructuresDamaged\",\r\n                color: \"red\",\r\n            },\r\n        ],\r\n    },\r\n\r\n    hist_selector: {\r\n        tabs: [\r\n            {\r\n                text: \"Acres Burned\",\r\n                cols: \"AcresBurned\",\r\n                color: \"red\",\r\n            },\r\n            {\r\n                text: \"Days Burned\",\r\n                cols: \"last_time\",\r\n                color: \"red\",\r\n            },\r\n            {\r\n                text: \"Personnel Involved\",\r\n                cols: \"PersonnelInvolved\",\r\n                color: \"red\",\r\n            },\r\n            { text: \"Injuries\", cols: \"Injuries\", color: \"red\" },\r\n            {\r\n                text: \"Fatalities\",\r\n                cols: \"Fatalities\",\r\n                color: \"red\",\r\n            },\r\n            {\r\n                text: \"Structures Destroyed\",\r\n                cols: \"StructuresDestroyed\",\r\n                color: \"red\",\r\n            },\r\n            {\r\n                text: \"Structures Damaged\",\r\n                cols: \"StructuresDamaged\",\r\n                color: \"red\",\r\n            },\r\n        ],\r\n        filter: { text: \"Year\", cols: \"ArchiveYear\" },\r\n    },\r\n\r\n    scatter_selector: {\r\n        tabs: [\r\n            {\r\n                text: \"Acres Burned\",\r\n                cols: \"AcresBurned\",\r\n                color: \"red\",\r\n            },\r\n            {\r\n                text: \"Days Burned\",\r\n                cols: \"last_time\",\r\n                color: \"red\",\r\n            },\r\n            {\r\n                text: \"Personnel Involved\",\r\n                cols: \"PersonnelInvolved\",\r\n                color: \"red\",\r\n            },\r\n            { text: \"Injuries\", cols: \"Injuries\", color: \"red\" },\r\n            {\r\n                text: \"Fatalities\",\r\n                cols: \"Fatalities\",\r\n                color: \"red\",\r\n            },\r\n            {\r\n                text: \"Structures Destroyed\",\r\n                cols: \"StructuresDestroyed\",\r\n                color: \"red\",\r\n            },\r\n            {\r\n                text: \"Structures Damaged\",\r\n                cols: \"StructuresDamaged\",\r\n                color: \"red\",\r\n            },\r\n        ],\r\n    }\r\n};\r\n\r\nconst getters = {\r\n\r\n};\r\n\r\nconst actions = {\r\n\r\n};\r\n\r\nconst mutations = {\r\n\r\n\r\n};\r\n\r\nexport default {\r\n    state,\r\n    getters,\r\n    actions,\r\n    mutations\r\n};","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\nimport app_data from './modules/app_data'\r\nimport ui_control from './modules/ui_control'\r\n\r\nVue.use(Vuex)\r\n\r\nexport default new Vuex.Store({\r\n  modules: {\r\n    app_data,\r\n    ui_control\r\n  }\r\n})\r\n","import Vue from 'vue'\r\nimport App from './App.vue'\r\nimport vuetify from './plugins/vuetify';\r\nimport store from './store'\r\n\r\nVue.config.productionTip = false\r\n\r\nnew Vue({\r\n  vuetify,\r\n  store,\r\n  render: h => h(App)\r\n}).$mount('#app')\r\n","export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&id=5df4839e&scoped=true&lang=css&\""],"sourceRoot":""}